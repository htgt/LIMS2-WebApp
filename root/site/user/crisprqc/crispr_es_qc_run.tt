[% META title="Crispr ES Cell QC"; META tab_name = 'QC' %]

<link rel="stylesheet" type="text/css" href="[% c.uri_for( '/static/css/traceviewer.css' ) %]">

<!--[if lte IE 8]><script language="javascript" type="text/javascript" src="[% c.uri_for( '/static/js/excanvas.min.js' ) %]"></script><![endif]-->
<script language="javascript" type="text/javascript" src="[% c.uri_for( '/static/js/jquery.flot.min.js' ) %]"></script>
<script language="javascript" type="text/javascript" src="[% c.uri_for( '/static/js/jquery.flot.navigate.min.js' ) %]"></script>
<script language="javascript" type="text/javascript" src="[% c.uri_for( '/static/js/jquery.flot.traceviewer.js', { v => 5} ) %]"></script>
<script language="javascript" type="text/javascript" src="[% c.uri_for( '/static/js/crispr-qc.js' ) %]"></script>
<script type="text/javascript">
    api_url = '[% c.uri_for("/api/update_crispr_es_qc_well") %]'
</script>
<script language="javascript" type="text/javascript" src="[% c.uri_for( '/static/js/crispr-es-qc-well-update.js' ) %]"></script>


<script type="text/javascript">
var traceviewers = [];
var tv;
$(document).ready(function() {
    if ( [% run_validated %] ) {
        $("#validate_run").hide();
    }
    else {
        $("#invalidate_run").hide();
        $("#validate_label").hide();
    }

    $(".traces").click(function(e) {
        e.preventDefault();

        //the code for this is inside jquery.flot.traceviewer.js
        tv = new TraceViewer( "[% c.uri_for('/public_api/trace_data') %]", $(this) [% IF truncate == 0 %], 1 [% END %] );
        tv.well = (tv.fwd_container.closest('tr[class^="well_tr"]')) ? tv.fwd_container.closest('tr[class^="well_tr"]').attr('id') : tv.rev_container.closest('tr[class^="well_tr"]').attr('id');

        for(var index = 0; index < traceviewers.length; index++) {
            if (tv.well == traceviewers[index].well) {
                traceviewers[index] = tv;
                return;
            }
        };
  
        traceviewers.push(tv);
 
    });

    // validate or invalidate run
    $("#validate_run, #invalidate_run").click(function(e) {
        e.preventDefault();

        var element = $(this);
        //set button state to loading, shows data-loading-text value
        element.button('loading');

        $.ajax({
            type: "POST",
            url: '[% c.uri_for("/api/update_crispr_es_qc_run") %]',
            data: {
                "id": '[% qc_run_id %]',
                "validated": element.attr('data-validate')
            },
            success: function(data) {
                console.log(data);
                element.delay(500).queue(function(){
                    $(this).button('reset').dequeue();// resets button to original text
                    // toggle both buttons plus validate label
                    $('#invalidate_run').toggle();
                    $('#validate_run').toggle();
                    $("#validate_label").toggle();
                });
            },
            error: function(data) {
                console.log(data);
                element.delay(500).queue(function(){
                    $(this).removeClass('btn-primary').removeClass('btn-warning').addClass('disabled').addClass('btn-danger').dequeue();
                    element.text('error updating qc run');
                });
                alert( 'Error updating crispr es qc run' );
            },
            dataType: 'json'
        });
    });

    $(".validate_crispr_checkbox").change(function() {

        var state = this.checked;
        var crispr_id = $(this).attr('data-crispr_id');
        var crispr_es_qc_well_id = $(this).attr('data-crispr_es_qc_well_id');

        $.ajax({
            type: "POST",
            url: '[% c.uri_for( "/api/validate_crispr" ) %]',
            data: {
                "crispr_es_qc_well_id": crispr_es_qc_well_id,
                "crispr_id": crispr_id,
                "validated": state
            },
            success: function(data) {
                console.log(data);
            },
            error: function(data) {
                console.log(data);
                alert( 'Error validating crispr change not saved' );
            },
            dataType: 'json'
        });
    });

    $(".validate_het_checkbox").change(function() {

        var state = this.checked;
        var well_id = $(this).attr('well_id');

        $.ajax({
            type: "POST",
            url: '[% c.uri_for( "/api/set_unset_het" ) %]',
            data: {
                "user": '[% c.user.name %]',
                "well_id": well_id,
                "set": state
            },
            success: function(data) {
                console.log(data);
            },
            error: function(data) {
                console.log(data);
                // alert( 'Error setting Het validation status' );
            },
            dataType: 'json'
        });
    });

    $(".validate_het_five_checkbox").change(function() {

        var state = this.checked;
        var well_id = $(this).attr('well_id');

        $.ajax({
            type: "POST",
            url: '[% c.uri_for( "/api/validate_het" ) %]',
            data: {
                "user": '[% c.user.name %]',
                "well_id": well_id,
                "five_prime": state
            },
            success: function(data) {
                console.log(data);
            },
            error: function(data) {
                console.log(data);
                alert( 'Error setting Het five_prime validation status' );
            },
            dataType: 'json'
        });
    });

    $(".validate_het_three_checkbox").change(function() {

        var state = this.checked;
        var well_id = $(this).attr('well_id');

        $.ajax({
            type: "POST",
            url: '[% c.uri_for( "/api/validate_het" ) %]',
            data: {
                "user": '[% c.user.name %]',
                "well_id": well_id,
                "three_prime": state
            },
            success: function(data) {
                console.log(data);
            },
            error: function(data) {
                console.log(data);
                alert( 'Error setting Het five_prime validation status' );
            },
            dataType: 'json'
        });
    });

});

var click;
var focusTrace;
var wellTrace;


$(document).click(function(event) {
    click = $(event.target);
    var dir = click.children();
    var wellName = click.parents('tr[class^="well_tr"]').attr('id');
    if (typeof(dir.attr('id')) != "undefined") {
        traceviewers.forEach( function(trace) {
            if (trace.well == wellName) {
                wellTrace = trace;
            }
        });
        if (wellTrace) {
            focusTrace = wellTrace[dir.attr('id') + "_plot"];
            adjustPane(dir, dir.text());
        }
        else {
            console.log(wellName + dir.attr('id') + " not found");
        }
    }
});


var result;

function adjustPane(text, dir) {
    var selection = window.getSelection();

    //Using Jquery mouse target $(event.target)

    var tr = text.closest("tr");
    var well_name = tr.attr('id');
    //Get table row nearest to mouse location


    tr = tr[0].getElementsByTagName('div');

    var div;
    for (var counter = 0; counter < tr.length; counter++) {
        if (tr[counter].id == "seqs" + well_name && tr[counter].className == "alignment_inner") {
            div = tr[counter];
        }
    }
    //HTMLcollection must not be iterated through by foreach
    //Find the div inside the HTMLcollection containing the two sequences
    div = $(div).text();
    //Remove HTML tags
    div = div.replace(/-/g,'N');
    
    var regex = /[ACTGNn]+/g;
   
    var match;
    result = div.match(regex);
    //Remove everything not relating to the sequence 
    var customSelection = selection.toString();
    var referencePoint = focusTrace._pos;
    
    for (var index = 0; index < result.length; index++) {
        if (result[index].search(focusTrace._read) != -1) {
            dir = index;
        }
    }

    var loc = findCoords(result, referencePoint, selection, dir);
    wellTrace.moveToPoint(focusTrace, loc[0], loc[1]);
}

function getSliderOffset(seq){
    var read = focusTrace._read;
    return seq.search(read);
}

function getMouseOffset(seq, selection){
    if (selection.toString().length > 1) {
        return seq.search(selection.toString());
    } else {
        return seq.search(selection.focusNode.data) + selection.focusOffset;
    }
}


function findCoords(seqs, point, selection, dir) {
    var traceSeq = seqs[dir]; //Dir: 0 -> Fwd seq | 1 -> Rev seq 
    var target = selection.toString();
    var mouseOffset = getMouseOffset(traceSeq, selection); //Must be done before any update to the traceviewer

    //Init position is outside of the boundaries
    if (getSliderOffset(traceSeq) == -1) {
        focusTrace._initPos = focusTrace._pos;
    }

    //Allow for an average
    if (focusTrace._pos == focusTrace._initPos) {
        forceUpdate();
    }

    var sliderOffset = getSliderOffset(traceSeq); //Position of traceviewer slider in the seq
    var positionDiff = Math.round(focusTrace._pos - focusTrace._initPos); 
    var rate = Math.round( positionDiff / sliderOffset * 100) / 100; //Get rate to 2 decimal places

    var cost = (mouseOffset - sliderOffset) * rate;
    //Hueristic to mouse point

    if (target.length < 5) {
        return [cost + focusTrace._pos - 125, cost + focusTrace._pos + 125];
    } else {
        var endCost = cost + (target.length * rate);
        return [cost + focusTrace._pos, endCost + focusTrace._pos]; 
    }
}

function forceUpdate() {
    var newPos = focusTrace._pos + 300;
    wellTrace.moveToPoint(focusTrace, newPos - 125, newPos + 125);
    //Move the traceviewer to allow for an average of the spacing between bases

}

</script>

<div class="well">
    <table class="table table-condensed">
        <tr>
            <th>QC Run ID</th>
            <td id="qc_run_id">[% qc_run_id %]</td>
        </tr>
        <tr>
            <th>Sequencing project</th>
            <td>[% seq_project %]</td>
        </tr>
        <tr>
            <th>Sub Project</th>
            <td>[% sub_project %]</td>
        </tr>
        <tr>
            <th>Validated</th>
            <td>
                <span id="validate_label" class="label label-success">Validated</span>
            </td>
        </tr>
    </table>
    <a id="delete_run_button" class="btn btn-danger" role="button" href="#DeleteRunModal" data-toggle="modal">
        <i class="icon-remove icon-white"></i> Delete QC Run
    </a>

    [% IF truncate %]
        <a id="truncate_toggle" class="btn" role="button" href="[% c.uri_for('es_qc_run', qc_run_id, { truncate => 0 }) %]" >
            <i class="icon-resize-full"></i> Show Full Reads
        </a>
    [% ELSE %]
        <a id="truncate_toggle" class="btn" role="button" href="[% c.uri_for('es_qc_run', qc_run_id) %]" >
            <i class="icon-resize-small"></i> Truncate Reads
        </a>
    [% END %]

    [% IF wells.size > 0 %]
        <a id="validate_run" class="btn pull-right btn-primary" role="button" data-loading-text="... working" data-validate="true">
            <i class="icon-gift icon-white"></i> Validate QC Run
        </a>

        <a id="invalidate_run" class="btn pull-right btn-warning" role="button" data-loading-text="... working" data-validate="false">
            <i class="icon-ban-circle icon-white"></i> Invalidate Qc Run
        </a>
    [% END %]
</div>

<div class="modal hide fade" id="DeleteRunModal">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal">×</button>
      <h3 id="myModalLabel">Delete QC Run</h3>
    </div>

    <div class="modal-body" align="center">
      Are you sure you want to delete QC run <strong>[% qc_run_id %]</strong>?
    </div>

    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Cancel</button>
      <a class="btn btn-danger" href="[% c.uri_for('/user/crisprqc/delete_qc_run', qc_run_id) %]" id="delete_run_button">
        <i class="icon-remove icon-white"></i> Confirm Delete QC Run
      </a>
    </div>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Well</th>
            <th>ES QC Well ID</th>
            <th>Gene</th>
            <th>Crispr ID</th>
            <th>Alignment</th>
            <th>Accept</th>
            <th>Damage Type</th>
            <th>Variant Size</th>
            <th>Variant Files</th>
            <th>Protein Sequences</th>
            <th>Reads</th>
            <th>Deletions</th>
            <th>Inserts</th>
        </tr>
    </thead>
    <tbody>
        [% FOR row IN wells %]
            <tr id="[% row.well_name %]" class="well_tr">

                [% INCLUDE 'crispr_qc_view.tt'
                    row                    = row
                    accept                 = can_accept_wells
                    edit                   = 1
                    complete_info          = 1
                    hide_crispr_well_id    = 0
                    hide_crispr_validation = hide_crispr_validation
                    hide_het_validation    = hide_het_validation
                %]

            </tr>
        [% END %]

        [% IF wells.size == 0 %]
        <tr>
            <td colspan="8" style="text-align: center">Well data is pending, please come back later</td>
        </tr>
        [% END %]
    </tbody>
</table>


