<style>

.hdrSeq {
    width: 1125px;
    white-space: nowrap;
    font-family: "Lucida Console", Monaco, monospace;
    overflow-x: hidden;
    text-transform: uppercase;
}

.highlight {
    background-color: green;
    color: white;
}

#caret {
  animation: blink-animation 1s step-start 0s infinite;
  -webkit-animation: blink-animation 1s step-start 0s infinite;
}

@keyframes blink-animation {
  50% {
    opacity: 0.0;
  }
}

@-webkit-keyframes blink-animation {
  50% {
    opacity: 0.0;
  }
}
</style>

<h2>HDR Template</h2>
<table class="table table-striped" style="width: 1125px;">
    <tr>
        <th>Reference Sequence</th>
    </tr>
    <tr>
        <td>      
            <div id="refSeq" class="hdrSeq">[% amplicon %]</div>
        </td>
    </tr>
    <tr>
        <th>HDR Template</th>
    </tr>
    <tr>
        <td>
            <div id="templateSeq" class="hdrSeq">[% amplicon %]</div>
        </td>
    </tr>
</table>

<button id="editTemplate" class="btn btn-primary">
    Edit
</button>
<button id="resetTemplate" class="btn btn-danger">
    Reset
</button>
<div id="editControls"></div>

<script type="text/javascript" charset="utf-8">

jQuery.fn.extend({
    sequenceText: function() {
        var regWhitespace = /[^ACTGactg]+/g;
        var text = $(this).text() || $(this).val();
        return text.replace(regWhitespace, '').toUpperCase();
    }
});

$(document).ready(function() {
    scrollable();
    hdr_highlight('#templateSeq');
});

$('#editTemplate').click(function() {
    var wrapper = $('<div class="editing"></div>');
    var form = $('<form action="#" class="edit-form"></form>');
    var input = $('<input id="templateInput" type="text" class="hdrSeq templateInput" pattern="[ACTGactg]+">');

    $('#templateSeq').after(wrapper);
    $('#templateSeq').remove().appendTo(wrapper).hide();

    input.css({
        display: 'block',
        font: "Lucida Console",
        width: "1125px",
    });

    wrapper.append(form);
    form.append(input);
    input.val($('#templateSeq').sequenceText());
    $('#templateInput').bind('keypress', nucleotides);
});

$('#resetTemplate').click(function() {
    $('#templateInput').val($('#templateSeq').sequenceText()).focus();
    hdr_highlight('#templateInput');
});

$(document).on("change keydown keyup keypress paste input click", '#templateInput', function(evt) {
    hdr_highlight('#templateInput', evt.target.selectionStart);
});

function nucleotides(event) {
    var value = String.fromCharCode(event.which);
    var pattern = new RegExp(/[ACTGactg]/i);
    return pattern.test(value);
}

function scrollable() {
    $('.hdrSeq:first').css('overflow-x','scroll');
    $('.hdrSeq:first').scroll(function() {
        $('.hdrSeq').scrollLeft($(this).scrollLeft());
    });
}

function hdr_highlight(template, caret) {
    var refSeq = $('#refSeq').sequenceText();
    var templateSeq = $(template).sequenceText();

    var refHigh = "";
    var templateHigh = "";
    var spanOpen = false;
    templateSeq.split("").forEach(function(value, index) {
        if (index == caret) {
            refHigh += '<span id="caret">|</span>';
        }
        if (value.toUpperCase() != refSeq.charAt(index).toUpperCase()) {
            refHigh += !spanOpen ? "<span class='highlight'>" : "";
            templateHigh += !spanOpen ? "<span class='highlight'>" : "";
            refHigh += refSeq.charAt(index);
            templateHigh += value;
            spanOpen = true;
        } else {
            refHigh += spanOpen ? "</span>" : "";
            templateHigh += spanOpen ? "</span>" : "";
            refHigh += refSeq.charAt(index);
            templateHigh += value;  
            spanOpen = false;
        }
    });
    $('#refSeq').html(refHigh);
    //$(template).html(templateHigh);
}

</script>
