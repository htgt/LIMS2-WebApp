<script src="[% c.uri_for( '/static/jquery/js/d3.min.js' ) %]"></script>
<style>

.colourSVG {
    width:  20px;
    height: 20px;
}

.wtKey {
    fill:   #66C2A5; /* Green */
    stroke: #66C2A5;
}

.nhejKey {
    fill:   #FFAA00; /* Orange */
    stroke: #FFAA00;
}

.hdrKey {
    fill:   #D9E354; /* Yellow */
    stroke: #D9E354;
}

.mixedKey {
    fill:   #73667A; /* Plum */
    stroke: #73667A;
}

.frameKey {
    fill:   #103877; /* Dark Blue */
    stroke: #103877;
}

.calls td:last-child {
    text-align: right;
}

.calls th:last-child {
    text-align: right;
}

.amplicon {
    width: 800px;
    display: inline-block;
    overflow-x: scroll;
}

.designOV td:last-child {
    width: 800px;
}

</style>

<h2>QC results</h2>
[% FOREACH exp IN data.experiments %]
    [% SET uniq_id = exp.qc_origin_plate _ "_" _ exp.qc_origin_well _ "_" _ exp.experiment_name %]
    <h3>[% exp.qc_origin_plate %]_[% exp.qc_origin_well %] - [% exp.experiment_name %]: [% exp.gene %]</h3>
    <table class="table table-striped">
         <tr>
            <td>Experiment ID</td>
            <td>[% exp.experiment_id %]</td>
        </tr>       
        <tr>
            <td>Design ID</td>
            <td>[% exp.design_id %]</td>
        </tr>
        <tr>
            <td>Gene ID</td>
            <td>[% exp.gene_id %]</td>
        </tr>
        <tr>
            <td>Gene Symbol</td>
            <td>[% exp.gene %]</td>
        </tr>
        <tr>
            <td>Species</td>
            <td>[% exp.species %]</td>
        </tr>
    </table>
    <div class="panel-group col-md-12" id="designs[% uniq_id %]">
        <div class="panel panel-default">
            <div class="panel-heading" id="allelesHeader">
                <h4 class="panel-title">
                    <a role="button" data-toggle="collapse" data-parent="#designs[% uniq_id %]" 
                        href="#desColl[% uniq_id %]">
                        Design
                    </a>
                </h4>
            </div>
            <div id="desColl[% uniq_id %]" class="panel-collapse collapse">
                <div class="panel-body">
                    <table class="designOV table table-striped">
                        <tr>
                            <th>Design</th>
                            <th>[% exp.design_id %]</th>
                        </tr>
                        <tr>
                            <td>Gene ID</td>
                            <td>[% exp.gene_id %]</td>
                        </tr>
                        <tr>
                            <td>Gene Symbol</td>
                            <td>[% exp.gene %]</td>
                        </tr>
                        <tr>
                            <td>Species</td>
                            <td>[% exp.species %]</td>
                        </tr>
                        <tr>
                            <td>Crispr</td>
                            <td class="crispr">[% exp.crisprs.join(',') %]</td>
                        </tr>
                        <tr>
                            <td>Miseq WT Amplicon</td>
                            <td class="amplicon">[% exp.amplicon %]</td>
                        </tr>
                    </table>
                </div>
                <div class="panel-footer">
                    <div class="row">
                        [% SET externals = ['exf','exr'] %]
                        [% FOREACH ext IN externals %]
                            <div class="col-md-6">
                                <table id="[% ext %][% uniq_id %]" class="table table-striped">
                                    <tr>
                                        <th class="col-md-4">Primer</th>
                                        <th>[% ext FILTER upper %]</th>
                                    </tr>
                                </table>
                            </div>
                        [% END %]
                    </div>
                    <div class="row">
                        [% SET internals = ['inf','inr'] %]
                        [% FOREACH inte IN internals %]
                            <div class="col-md-6">
                                <table id="[% inte %][% uniq_id %]" class="table table-striped">
                                    <tr>
                                        <th class="col-md-4">Primer</th>
                                        <th>[% inte FILTER upper %]</th>
                                    </tr>
                                </table>
                            </div>
                        [% END %]
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-12">
        [% IF exp.frameshift == 1 %]
            <h4 class="col-md-6">Read Quantification : [% exp.classification %] - Frameshifted </h4>
        [% ELSE %]
            <h4>Read Quantification : [% exp.classification %]</h4>
        [% END %]
    </div>
    <div class="col-md-12">
        <div id="[% uniq_id %]" class="donuts col-md-6"></div>
        <div class="col-md-6">
            <table class="table table-striped calls">
                 <tr>
                    <th class="col-md-5">Call</th>
                    <th>Colour</th>
                    <th>#Read</th>
                    <th>%Read</th>
                </tr>       
                <tr>
                    <td>Wild Type</td>
                    <td>
                        <svg class="colourSVG">
                            <rect class="wtKey" width="18px" height="18px"></rect>
                            <!--- Width and Height are attributes of SVG thus can not be set via CSS --->
                        </svg>
                    </td>
                    <td>[% exp.read_counts.wt.count %]</td>
                    <td>[% exp.read_counts.wt.perc %]%</td>
                </tr>
                <tr>
                    <td>NHEJ</td>
                    <td>
                        <svg class="colourSVG">
                            <rect class="nhejKey" width="18px" height="18px"></rect>
                        </svg>
                    </td>
                    <td>[% exp.read_counts.nhej.count %]</td>
                    <td>[% exp.read_counts.nhej.perc %]%</td>
                </tr>
                <tr>
                    <td>HDR</td>
                    <td>
                        <svg class="colourSVG">
                            <rect class="hdrKey" width="18px" height="18px"></rect>
                        </svg>
                    </td>
                    <td>[% exp.read_counts.hdr.count %]</td>
                    <td>[% exp.read_counts.hdr.perc %]%</td>
                </tr>
                <tr>
                    <td>Mixed HDR-NHEJ</td>
                    <td>
                        <svg class="colourSVG">
                            <rect class="mixedKey" width="18px" height="18px"></rect>
                        </svg>
                    </td>
                    <td>[% exp.read_counts.mix.count %]</td>
                    <td>[% exp.read_counts.mix.perc %]%</td>
                </tr>
            </table>
            <table class="table">
                <tr>
                    <th class="col-md-5">
                        Call
                    </th>
                    <th>
                        Colour
                    </th>
                    <th>
                        Frameshifted?
                    </th>
                </tr>
                <tr>
                    <td>
                        Frameshifted
                    </td>
                    <td>
                        <svg class="colourSVG">
                            <rect class="frameKey" width="18px" height="18px" vertical-align="bottom"></rect>
                        </svg>
                    </td>
                    <td>
                        [% IF exp.frameshift == 1 %]
                            <i class="glyphicon glyphicon-ok"></i>
                        [% ELSE %]
                            <i class="glyphicon glyphicon-remove"></i>
                        [% END %]
                    </td>
                </tr>
            </table>
        </div>
    </div>
    <div class="panel-group col-md-12" id="alleles[% exp.uniq_id %]">
        <div class="panel panel-default">
            <div class="panel-heading" id="allelesHeader">
                <h4 class="panel-title">
                    <a role="button" data-toggle="collapse" data-parent="#alleles[% uniq_id %]"
                        href="#collapse[% uniq_id %]">
                        Alleles Frequency
                    </a>
                </h4>
            </div>
            <div id="collapse[% uniq_id %]" class="panel-collapse collapse">
                <table id="freq[% uniq_id %]" class="table table-striped table-bordered"></table>
            </div>
        </div>
    </div>
[% END %]

[% INCLUDE 'user/pointmutation/miseq_alleles_frequency.tt' %]
[% INCLUDE "user/pointmutation/miseq_donut_d3_setup.tt" %]

<script type="text/javascript" charset="utf-8">
var data = '[% tables %]';
data = jsonify(data);

$(document).ready(function() {
    fillTables();
    setRingDimensions();
    ringSVG();
    createRings();
    var exps = Object.keys(data);
    exps.map(function(exp) { buildDonut(exp) });
});

function jsonify(raw) {
    return JSON.parse(raw.replace(/&quot;/g,'"'));
}

function fillTables() {
    var expNames = Object.keys(data);

    expNames.forEach(function(exp) {
        var rowDetails = data[exp];
        formatDesigns(exp);
        fillAlleles(exp, rowDetails);
        fillOligos(exp, rowDetails);
    });

    return;
}

function fillAlleles(exp, rowDetails) {
    var columns = rowDetails.data.headers;
    columns = columns.filter(function(col) { return col != "Reference_Sequence" });
    
    var table = document.getElementById('freq' + exp);
    var tHead = table.createTHead();
    var headerRow = tHead.insertRow(0);
    for (var i = 0; i < columns.length; i++) {
        var hCell = headerRow.insertCell(i);
        $(hCell).text(columns[i]);
    }

    var rowData = rowDetails.data.rows;
    var tBody = table.createTBody();
    rowData.forEach(function(rData) {
        var row = tBody.insertRow(-1);
        for (var i = 0; i < columns.length; i++) {
            var cell = row.insertCell(i);
            if (columns[i] == 'Aligned_Sequence') {
                $(cell).html('<div class="seq' + exp + ' sequence">' + highlightBases(rData[columns[i]], rowDetails.crisprs, rData.Reference_Sequence) + '</div>');
            } else {
                $(cell).text(rData[columns[i]]);
            }
        }
    });

    $('.seq' + exp + ':last').css('overflow-x','scroll');
    $('.seq' + exp + ':last').scroll(function() {
        $('.seq' + exp).scrollLeft($(this).scrollLeft());
    });

    $('#freq' + exp).find('td:last-child').map(function() {
        var percCell = $(this).text();
        if (!isNaN(percCell)) {
            var perc = parseFloat(percCell);
            $(this).text(perc.toFixed(2) + '%');
        } 
    });

    return;
}

function fillOligos(exp, rowDetails) {
    var oligos = rowDetails.oligos;
    var rowKeys = ['chr_start', 'chr_end', 'chr_strand', 'chr_name', 'assembly'];
    oligos.forEach(function(oligo) {
        var loci = oligo.locus;
        var oligoTable = document.getElementById(oligo.type.toLowerCase() + exp);

        rowKeys.forEach(function(key) { 
            var row = oligoTable.insertRow(-1);
            var titleCell = row.insertCell(0);
            var valueCell = row.insertCell(1);

            var title = key.split("_")
                .map( (s) => s.charAt(0).toUpperCase() + s.substring(1) )
                .join(' ');
            titleCell.innerText = title;
            valueCell.innerText = loci[key];
        });

        var row = oligoTable.insertRow(-1);
        var titleCell = row.insertCell(0);
        var valueCell = row.insertCell(1);

        titleCell.innerText = "Sequence";
        valueCell.innerText = oligo.seq;
    });

    return;
}

function setRingDimensions() {
    width = 450,
    height = 175,
    radius = 60,
    arcWidth = 15,
    fsRadius = radius - arcWidth;
    rebuildArcs();

    return;
}

function ringSVG() {
    var svg = d3.selectAll('.donuts')
        .append("svg:svg")
        .attr("width", '100%')
        .attr("height", height)
        .attr("class","svgTool")
        .append("svg:g")
        .attr("class","node")
        .attr("transform", function(d){ return "translate(" + width / 2 + "," + height / 2 + ")"});
    return;
}

function buildDonut(exp) {
    donutText(exp);

    var values = data[exp].read_quant;
    var arcTypes = ['nhej', 'hdr', 'mix'];
    var ancestory = '#' + exp + ' > .svgTool > .node > ';

    var wtNode = d3.select(ancestory + '.wild').node();
    animateArc(wtNode, 100);
    
    arcTypes.map(function(type) {
        var node = d3.select(ancestory + '.' + type).node();
        animateArc(node, values[type].perc);
    });

    frameshiftDonut(ancestory, exp);

    return;
}

function animateArc(node, value) {
    value = value / Math.pow(10, 2);
    d3.select(node).transition().duration(500).attrTween("d", arcTween(value * tau, arc));
    return;
}

function frameshiftDonut(ancestory, exp) {
    var expData = data[exp];
    var frameNode = d3.select(ancestory + '.frame').node();
    var frameTau = expData.frameshift ? expData.frameshift : 0;

    d3.select(frameNode).transition().duration(500).attrTween("d", arcTween(frameTau * tau, fsArc));

    return;
}

function donutText(exp) {
    var splitExp = exp.split('_');
    var wellName = splitExp.slice(2)[0];
    console.log(exp + ' ' + wellName);
    d3.select("#" + exp + " > .svgTool > g.node").append("svg:text").attr("class","nodeText").attr("dx","-1em").attr("dy","0.4em").text(wellName);

    return;
}

function formatDesigns(exp) {
    var crisprDiv = $('#designs' + exp + ' .crispr');
    var seqText = crisprDiv.text();
    var strand = data[exp].oligos[0].locus.chr_strand;
    var seqs = seqText.split(',');
    
    var formattedSeq = [];
    seqs.forEach(function(seq) {
        if (strand == 1) {
            var pam = seq.slice(seq.length - 3, seq.length);
            formattedSeq.push(seq + ' ' + pam);
        } else {
            var pam = seq.slice(0, 3);
            formattedSeq.push(pam + ' ' + seq);
        }
    });
    $(crisprDiv).text(formattedSeq.join(', '));

    return;
}

</script>
