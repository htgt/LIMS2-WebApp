[%- META title = 'Point Mutation' %]
<script src="[% c.uri_for( '/static/jquery/js/d3.min.js' ) %]"></script>

<script src="[% c.uri_for( '/static/jquery/js/d3-tip.js' ) %]"></script>
<style>

.d3-tip {
    line-height: 1;
    padding: 12px;
    background: rgba(0, 0, 0, 0.8);
    color: #fff;
    border-radius: 2px;
    text-align: center;
}

/* Creates a small triangle extender for the tooltip */
.d3-tip:after {
    box-sizing: border-box;
    display: inline;
    font-size: 10px;
    width: 100%;
    line-height: 1;
    color: rgba(0, 0, 0, 0.8);
    content: "\25BC";
    position: absolute;
    text-align: center;
}


/* Style northward tooltips differently */
.d3-tip.n:after {
    margin: -1px 0 0 0;
    top: 100%;
    left: 0;
}
.lb-md {
    font-size: 22px;
}

.lb-sm {
    font-size: 16px;
}

.lb-xs {
    font-size: 13px;
}

body { 
    padding-bottom: 70px; 
}
</style>

<div class="page-header">
  <h1>Point Mutation [% IF miseq %]- [% miseq %] [% END %]</h1>
</div>

<div class="row">
    [% IF large_plate == 1 %]
        <div class="col-md-1" id="quadBack" hidden>
            <button class="btn btn-primary">
                <i class="glyphicon glyphicon-arrow-left"></i>
            </button>
        </div>
    [% END %]

    <div class="col-md-1">
        <label class="lb-md">Gene: </label>
    </div>
    <div class="col-md-2">
        <select class="form-control" align="center" id="geneSelect">
            <option value="All" selected="selected">All</option>
            [% FOREACH gene IN genes %]
                <option value="[% gene %]">[% gene %]</option>
            [% END %]
        </select>
    </div>
    <div class="col-md-2">
        <label class="lb-md">Experiment: </label>
    </div>
    <div class="col-md-2">
        <select class="form-control" align="center" id="expSelect">
            <option value="All" selected="selected">All</option>
            [% FOREACH exp IN experiments %]
                <option class="ddExp" value="[% exp %]">[% exp %]</option>
            [% END %]
        </select>
        <div class="checkbox">
            <label class="lb-xs"><input type="checkbox" id="filterReads" value="" checked>Read Counts > 1000</label>
        </div>
    </div>
    <div class="col-md-1">
        <button class="btn btn-danger" onclick="clearSelection();">Clear <i class="glyphicon glyphicon-remove"></i></button>
    </div>
    <div class="col-md-3">
        <label class="col-md-4 lb-sm">Targeting Efficiency: </label>
        <div class="col-md-6" id="targetingEfficiency">
        </div>
    </div>
</div>

</br>
<div id="pageFocus">
    [% IF large_plate == 1 %]
        [% INCLUDE "miseq_quadrant_table.tt" %]
    [% ELSE %]
        [% INCLUDE "miseq_overview_table.tt" page = 0 %]
    [% END %]
</div>

<script type="text/javascript" charset="utf-8">

var data = '[% wells %]';
var json = jsonify(data);
var rawExp = '[% overview %]';
var overview = jsonify(rawExp);
var rawLink = '[% gene_exp %]';
var link = jsonify(rawLink);
var rawTargets = '[% efficiency %]';
var efficiencies = jsonify(rawTargets);
var rawQuads = '[% quadrants %]';
var quadrants;
if (rawQuads) {
    quadrants = jsonify(rawQuads);
}
var frameshiftJSON = "";
var allExps = [];
var prevExp = "";

function jsonify(raw) {
    return JSON.parse(raw.replace(/&quot;/g,'"'));
}

//One tau equals a full circle. 37% becomes 0.37 * tau so that 37% of the donut will be arced
var tau = 2 * Math.PI;

var width = window.innerWidth / 20,
    height = window.innerHeight / 13,
    radius = (Math.min(width, height) / 2) - 1,
    arcWidth = Math.min(width, height) / 7,
    fsRadius = radius - arcWidth;

var pie = d3.pie()
    .sort(null)
    .value(function(d) { return d.population; });


var arc = d3.arc()
    .innerRadius(fsRadius)
    .outerRadius(radius)
    .startAngle(0);

//frameshift arcs
var fsArc = d3.arc()
    .innerRadius(fsRadius - (arcWidth - 2))
    .outerRadius(fsRadius)
    .startAngle(0);

//targeting efficiency arcs
var teArc = d3.arc()
    .innerRadius(fsRadius + 8)
    .outerRadius(radius + 8)
    .startAngle(0);

var tip = d3.tip()
    .attr('class', 'd3-tip')
    .offset([-10, 0])
    .html(function(d) {
        return tooltip($(this))
    });

var initDonut = d3.pie()([0,0]);

function createRings() {
    var svg = d3.selectAll("td")
        .append("svg:svg")
        .attr("width", '100%')
        .attr("height", height)
        .attr("class","svgTool")
        .attr("onclick","wellArc(this)")
        .on('mouseover', tip.show)
        .on('mouseout', tip.hide)
        .append("svg:g")
        .attr("class","node")
        .attr("transform", function(d){ return "translate(" + width / 2 + "," + height / 2 + ")"});

    svg.call(tip);

    //Base ring
    d3.selectAll("g.node")
        .append("path")
        .attr("class","wellPath")
        .datum({endAngle: tau})
        .style("fill","#887bf7")
        .attr("d",arc);

    var wt = d3.selectAll("g.node")
        .append("path")
        .datum(initDonut[0])
        .style("fill","#66c2a5")
        .attr("d", arc)
        .attr("class","donut wild");

    var nhej = d3.selectAll("g.node")
        .append("path")
        .datum(initDonut[1])
        .style("fill","#ffaa00")
        .attr("d", arc)
        .attr("class", "donut nhej");

    var hdr = d3.selectAll("g.node")
        .append("path")
        .datum(initDonut[1])
        .style("fill","#d9e354")
        .attr("d", arc)
        .attr("class", "donut hdr");

    var mixed = d3.selectAll("g.node")
        .append("path")
        .datum(initDonut[1])
        .style("fill","#73667a")
        .attr("d", arc)
        .attr("class", "donut mix");

    var frameshift = d3.selectAll("g.node")
        .append("path")
        .datum(initDonut[1])
        .style("fill","#103877")
        .attr("d", fsArc)
        .attr("class", "frame");

    /*
    var missingData = d3.selectAll("g")
        .append("path").datum(initDonut[1])
        .style("fill","#8f0a0b")
        .attr("d", arc)
        .attr("class", "donut")
        .attr("class", "miss");
    */

    d3.selectAll("g.node").append("svg:text").attr("class","nodeText").attr("dx","-0.6em").attr("dy","0.4em").text(function(){ return twoDigits($(this).parents()[2].id) });
}

//Targeting efficiency container
var teSvg = d3.select("#targetingEfficiency")
    .append("svg:svg")
    .attr("width", width + 20)
    .attr("height", height + 20)
    .attr("class","teSvgTool")
    .append("svg:g")
    .attr("class","teNode")
    .attr("transform", function(d){ return "translate(" + (width + 20) / 2 + "," + (height + 20) / 2 + ")"});

//Targeting Efficiency donut
d3.selectAll("g.teNode")
    .append("path")
    .attr("class","tePath")
    .datum({endAngle: tau})
    .style("fill","#887bf7")
    .attr("d",teArc);

var targetEff = d3.select("g.teNode")
    .append("path")
    .datum(initDonut[1])
    .style("fill","#ffaa00")
    .attr("d", teArc)
    .attr("class","tePath targeting");


var targetText = d3.selectAll("g.teNode")
    .append("svg:text")
    .attr("dx","-0.9em")
    .attr("dy","0.4em")
    .attr("id","teText");

$(document).ready(function() {
    createRings();
    frameshifts();
    windowDims();
    $('[data-toggle="tooltip"]').tooltip();
    buildExps(1);
    document.title = '[% miseq %] - Point Mutation';
    resize();
    highlightSelection();
});

$('#geneSelect').change(function() {
    if ($('#geneSelect').val() != 'All') { 
        $("#expSelect").children('option').hide().prop('disabled', true);
        $("#expSelect").children('option[value^=All]').show().prop('disabled', false);
        var geneExps = link.summary[$('#geneSelect').val()];
        for (var count = 0; count < geneExps.length; count++) {
            $("#expSelect").children('option[value~=' + geneExps[count] + ']').show().prop('disabled', false);
        }
        $('#expSelect').val(geneExps[0]);
    } else {
        $("#expSelect").children('option').show().prop('disabled', false);
        $('#expSelect').val('All');
    }
    if ($('#pageFocus').find('.quad').length != 0) {
        highlightQuad();
    } else {
        highlightSelection();
    }
});

$('#expSelect').change(function() {
    if ($('#pageFocus').find('.quad').length != 0) {
        highlightQuad();
    } else {
        highlightSelection();
    }
});

$('#filterReads').change(function() {
    highlightSelection();
});

$('#pageFocus').on('click','rect.quad' , function() {
    var con;
    switch (this.id) {
        case "firstQuad":
            con = `[% INCLUDE "miseq_overview_table.tt" page = 0 %]`;
            break;
        case "secondQuad":
            con = `[% INCLUDE "miseq_overview_table.tt" page = 96 %]`;
            break;
        case "thirdQuad":
            con = `[% INCLUDE "miseq_overview_table.tt" page = 192 %]`;
            break;
        case "fourthQuad":
            con = `[% INCLUDE "miseq_overview_table.tt" page = 288 %]`;
            break;
        default:
            console.log("outside of plate limits..");
    }
    //Not ideal but unable to transfer js var into tt
    $('#pageFocus').html(con);
    createRings();
    buildExps();
    prevExp = "";
    clearHighlight();
    resize();
    frameshifts();
    $('#quadBack').show();
});

$('#quadBack').on('click', function() {
    var quads = `[% INCLUDE "miseq_quadrant_table.tt" %]`;
    $('#pageFocus').html(quads);
    highlightQuad();
    $('#quadBack').hide();
});

function clearSelection() {
    $("#expSelect").children('option').show().prop('disabled', false);
    $("#geneSelect").children('option').show().prop('disabled', false);
    $('select').each(function() { this.selectedIndex = 0 });

    if ($('#pageFocus').find('.quad').length != 0) {
        highlightQuad();
    } else {
        highlightSelection();
    }
}

$(window).resize(function() {
    highlightSelection('All');
    resize();
    highlightSelection();
});

function resize() {
    windowDims();
    $("td").css("width", "8%");
    d3.selectAll('.svgTool')
        .attr('width', width)
        .attr('height', height);
    d3.selectAll('.teSvgTool')
        .attr('width', width + 20)
        .attr('height', height + 20);
    setTimeout(function(d) { d3.selectAll('path').filter('.wellPath').attr('d', arc) }, 300 );
    setTimeout(function(d) { d3.selectAll('path').filter('.tePath').attr('d', teArc) }, 300 );
    setTimeout(function(d) { d3.selectAll('frame').attr('d', fsArc) }, 300 );
    d3.selectAll('g.node')
        .attr("transform", function(d){ return "translate(" + width / 2 + "," + height / 2 + ")"});
    d3.selectAll('g.teNode')
        .attr("transform", function(d){ return "translate(" + (width + 20) / 2 + "," + (height + 20) / 2 + ")"});
    d3.selectAll('.scan')
        .attr("cx", width / 2).attr("cy", height / 2)
        .attr("r", function(){ return radius - arcWidth; });
}

function windowDims() { 
    width = window.innerWidth / 20;
    height = window.innerHeight / 13;
    radius = (Math.min(width, height) / 2) - 1;
    arcWidth = Math.min(width, height) / 7;
    fsRadius = radius - arcWidth;
    arc = d3.arc()
        .innerRadius(fsRadius)
        .outerRadius(radius)
        .startAngle(0);
    teArc = d3.arc()
        .innerRadius(fsRadius + 8)
        .outerRadius(radius + 8)
        .startAngle(0);
    fsArc = d3.arc()
        .innerRadius(fsRadius - (arcWidth - 2))
        .outerRadius(fsRadius)
        .startAngle(0);
    return;
}


function wellArc(node) {
    var exp = document.getElementById('expSelect').value;
    if (exp == 'All') {
        window.open('[% c.uri_for('/user/point_mutation_allele/') %]' + encodeURI('?miseq=' + '[% miseq %]' + '&oligoIndex=' + node.parentNode.id)); 
    } else {
        window.open('[% c.uri_for('/user/point_mutation_allele/') %]' + encodeURI('?miseq=' + '[% miseq %]' + '&oligoIndex=' + node.parentNode.id + '&exp=' + exp)); 
    }
}

function twoDigits(n) {
    return n > 9 ? "" + n: "0" + n;
}

function buildExps(first) {
    var wells = json.summary;
    var nodes = d3.selectAll('td').nodes();
    var dropdown = document.getElementById('expSelect');

    for (var i = 0; i < nodes.length; i++) {
        var wellData = wells[twoDigits(nodes[i].id)];
        if ((wellData.status == 'Scanned-Out' || wellData.status == 'Empty') && first != null) {
            d3.select(nodes[i].childNodes[0]).append("circle")
                .attr("cx", width / 2).attr("cy", height / 2)
                .attr("r", function(){ return radius - arcWidth; })
                .attr("class", "scan")
                .style("opacity", 0.4)
                .style("fill", '#ff001a');
        }
        for (var expInt = 0; expInt < wellData.experiments.length; expInt++) {
            var node = nodes[i];
            var expName = wellData.experiments[expInt];
            /* 
            if (wellData.percentages[expName].miss != null) {
                var missArc = $(node).find('.miss');
                d3.select(missArc[0]).classed(expName, true);
            } else {
                Place below code here
            }
            */
            
            var types = ['nhej', 'wild', 'hdr', 'mix'];
            for (var type = 0; type < types.length; type++) {
                buildArcs(node, types[type], expName);
            }

        }
    }
}

function buildArcs(node, type, expName) {
    var arc = $(node).find('.' + type);
    d3.select(arc[0]).classed(expName, true);
}


function highlightSelection(selection) {
    clearHighlight();
    console.log("fired");
    selection = selection || document.getElementById('expSelect').value;
    
    if (selection != 'All') {
        setTimeout(function() { d3.selectAll('.' + selection).filter(".wild").transition().duration(500).attrTween("d", arcTween(tau, arc)); }, 250);
        setTimeout(function() { buildDonut(selection); }, 250);
    }

    calculateEfficiency(selection);
    prevExp = selection;

}

function highlightQuad(selection) {
    var rectTransition = d3.selectAll(".quad").transition().style("fill", "white").duration(1000); 

    selection = selection || document.getElementById('expSelect').value;
    if (selection != 'All') {
        var ranges = quadrants.summary[selection];
        ranges.forEach(function(range) {
            for (var quad = range.first; quad <= range.last; quad++) { //Needed to fill in gaps i.e. 97-386
                switch (quad) {
                    case 0:
                        d3.select('#firstQuad').transition().style("fill", "yellow").duration(1000);
                        break;
                    case 1:
                        d3.select('#secondQuad').transition().style("fill", "yellow").duration(1000);
                        break;
                    case 2:
                        d3.select('#thirdQuad').transition().style("fill", "yellow").duration(1000);
                        break;
                    case 3:
                        d3.select('#fourthQuad').transition().style("fill", "yellow").duration(1000);
                        break;
                    default:
                        console.log("Mistery quadrant added");
                }
            }
        });
    }
    calculateEfficiency(selection);
    prevExp = selection;
}


function buildDonut(exp) {
    var wells = json.summary;
    
    var nhejNodes = d3.selectAll('.' + exp).filter(".nhej").nodes();
    var hdrNodes = d3.selectAll('.' + exp).filter(".hdr").nodes();
    var mixNodes = d3.selectAll('.' + exp).filter(".mix").nodes();
    var frameNodes = d3.selectAll('.' + exp).filter(".frame").nodes();
    
    for (var nodeIt = 0; nodeIt < nhejNodes.length; nodeIt++) {
        var id = $(nhejNodes[nodeIt]).closest("td")[0].id;
        var values = wells[twoDigits(id)].percentages[exp];
        var total = +values.nhej + +values.wt + +values.hdr + +values.mix;
        var arcTau = values.mix / total;
        if ($('#filterReads').is(':checked') && total < 1000) {
            var wtArc = $($(nhejNodes[nodeIt]).closest("td")[0]).find('path.wild');
            d3.select(wtArc[0]).transition().duration(500).attrTween("d", arcTween(0, arc));
        } else {
            d3.select(mixNodes[nodeIt]).transition().duration(500).attrTween("d", arcTween(arcTau * tau, arc));
            arcTau = (+values.hdr + +values.mix) / total;
            d3.select(hdrNodes[nodeIt]).transition().duration(500).attrTween("d", arcTween(arcTau * tau, arc));
            arcTau = (+values.nhej + +values.hdr + +values.mix) / total;
            d3.select(nhejNodes[nodeIt]).transition().duration(500).attrTween("d", arcTween(arcTau * tau, arc));
        }
    }
    for (var nodeIt = 0; nodeIt < frameNodes.length; nodeIt++) {
        d3.select(frameNodes[nodeIt]).transition().duration(500).attrTween("d", arcTween(tau, fsArc));
    }
    //var missingDataNodes = d3.selectAll('.' + exp).filter(".miss").transition().duration(500).attrTween("d", arcTween(1 * tau));
}

function clearHighlight() {
    if (prevExp == "") {
        d3.selectAll(".donut").transition().duration(250).attrTween("d", arcTween(0, arc));
        d3.selectAll('.frame').transition().duration(250).attrTween("d", arcTween(0, fsArc));
    } else {
        d3.selectAll("." + prevExp).transition().duration(250).attrTween("d", arcTween(0, arc));
        d3.selectAll('.' + prevExp).filter('.frame').transition().duration(250).attrTween("d", arcTween(0, fsArc));
    }
    d3.select('.targeting').transition().duration(250).attrTween("d", arcTween(0, teArc));
    d3.selectAll(".svgTool").attr("title", function(){ return tooltip($(this)) });
}

function arcTween(newAngle, specArc) {
    return function(d) {
        var interpolate = d3.interpolate(d.endAngle, newAngle);
        return function(t) {
            d.endAngle = interpolate(t);
            return specArc(d);
        };
    };
}

function totalReads(well) {
    var keys = Object.keys(well);
    var total = 0;
    for (var i = 0; i < keys.length; i++) {
        var reads = well[keys[i]];
        total += +reads;
    }
    return total; 
}

function calculateEfficiency(target) {
    var data;
    if (target != 'All') {
        data = efficiencies.summary[target];
    } else {
        data = efficiencies.summary.all;
    }
    if (data) { 
        var targetPercentage = data.nhej / data.total;
        setTimeout(function() { d3.select('.targeting').transition().duration(500).attrTween("d", arcTween(targetPercentage * tau, teArc)); }, 250);
        d3.select('#teText').text(Math.round(targetPercentage * 100) + '%');
    } else {
        setTimeout(function() { d3.select('.targeting').transition().duration(500).attrTween("d", arcTween(0, teArc)); }, 250);
        d3.select('#teText').text('N/A');
    }
}

function frameshifts() {
    var index = '[% miseq %]';

    $.ajax({
        url: '[% c.uri_for('/api/point_mutation_frameshifts/') %]',
        type: "GET",
        contentType: 'application/json; charset=utf-8',
        data: {
            miseq: '[% miseq %]', 
        },
        success: function(result){
            frameshiftJSON = JSON.parse(result);
            buildFrameshifts();
            highlightSelection();
        },
        error: function() {
            console.log("Failed to retrieve data");
        }
    });
    
    return;
}

function buildFrameshifts() {
    var nodes = d3.selectAll('td').nodes();

    for (var key in frameshiftJSON) {
        var fsIndexes = frameshiftJSON[key];
        for (var i = 0; i < fsIndexes.length; i++) {
            var node = d3.select($('td#' + fsIndexes[i])).node();
            buildArcs(node, 'frame', key);
        }
    }

}

function tooltip(node) {
    var oligoIndex = twoDigits(node.parent()[0].id);
    var dataPoint = json.summary[oligoIndex];
    var response = "";
    var focusExp = document.getElementById('expSelect').value;

    if (dataPoint.experiments.some(function(e){ return e == focusExp })) {
        response = `
            Illumina Index: ` + oligoIndex + `<br>
            Gene: ` + overview.summary[focusExp].sort().toString() + `<br>
            Status: ` + dataPoint.status + `<br>
            NHEJ: ` + dataPoint.percentages[focusExp].nhej + ` reads<br>
            WT: ` + dataPoint.percentages[focusExp].wt + ` reads<br>
            HDR: ` + dataPoint.percentages[focusExp].hdr + ` reads<br>
            Mixed: <span class="ttData">` + dataPoint.percentages[focusExp].mix + `</span> reads<br>
            Classification: ` + dataPoint.classes[focusExp];
    } else if (focusExp != 'All'){
        response = `
            Oligo Index: ` + oligoIndex + `<br>
            Status: ` + dataPoint.status;
    } else { 
        response = `
            Oligo Index: ` + oligoIndex + `<br>
            Genes: ` + dataPoint.gene.sort().toString() + `<br>
            Status: ` + dataPoint.status;
    }
    return response;
}

</script>
