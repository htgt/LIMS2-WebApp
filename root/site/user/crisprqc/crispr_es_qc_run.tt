[% META title="Crispr ES Cell QC"; META tab_name = 'QC' %]

<style type="text/css">
.alignment {
    font-family: Monaco,Menlo,Consolas,"Courier New",monospace;
    font-size: 11px;
    display: block;
    font-weight: bold
}
.indel_sequence {
    font-family: Monaco,Menlo,Consolas,"Courier New",monospace;
    font-size: 11px;
    font-weight: bold;
}
</style>

<script type="text/javascript">
$(document).ready(function() {
    $(".alignment_inner").each(function() {
        var parent = $( this );

        var seq_a = parent.find(".seq_a").text();
        var c_a = seq_a.colour_alignment();
        c_a.append( $("<span>", {text: "(F)"}) );

        var seq_b = parent.find(".seq_b").text();
        var c_b = seq_b.colour_alignment();
        c_b.append( $("<span>", {text: "(R)"}) );

        parent.empty().append(c_a).append(c_b);
    });

    $(".accepted").click(function() {
        console.log( this.value );
        console.log( $("#qc_run_id").text() );

        //fade element out until its saved, waiting at least 500ms
        var element = $(this).parent().parent();
        element.fadeTo( "slow", 0.5 ).delay(500);

        $.post(
            '[% c.uri_for("/api/update_well_accepted") %]',
            { "well_id": this.value, "qc_run_id": $("#qc_run_id").text(), "accepted": this.checked },

            function (data) {
                console.log(data);
                //fade back in
                element.fadeTo( "slow", 1 );
            },
            'json'
        );
    });

});

function colour_string(seq) {
    seq.replaceWith( seq.colour_alignment() );
}

String.prototype.colour_alignment = function colour_string() {
    //a span to hold all the other spans
    var base = $("<span>", {style: "white-space: nowrap; display: block;"});

    var match_no_read = /No/;
    if ( this.match(match_no_read) ) {
      return base.text(this);
    }

    //generates a coloured span
    function make_span(buf, colour) {
        //write our buffer out into a span
        attrs = { text: buf };
        if (colour) attrs.style =  "background-color:" + colour + "; color:#FFFFFF";

        return $("<span>", attrs);
    }

    var match_char    = /[ACTGN]/;
    var mismatch_char = /[actgn]/;
    var delete_char   = /-/;
    var insert_char   = /[JLPYZ]/;

    //get colour of read base
    function calculate_base_colour(base) {
      var base_colour = "";
      if ( match_char.test(base) ) {
        base_colour = '#468847';
      }
      else if ( mismatch_char.test(base) ) {
        base_colour = '#FE9A2E';
      }
      else if ( delete_char.test(base) ) {
        base_colour = '#b94A48';
      }
      else if ( insert_char.test(base) ) {
        base_colour = '#0000FF';
      }

      return base_colour;
    }

    var base_map = {
      'A': 'A',
      'T': 'T',
      'C': 'C',
      'G': 'G',
      'N': 'N',
      'J': 'N',
      'L': 'A',
      'P': 'T',
      'Y': 'C',
      'Z': 'G',
      'X': 'X',
    };

    var current_colour = "";
    var buf = "";

    for ( var i = 0; i < this.length; i++ ) {
        var nuc = this.charAt(i);
        var colour = calculate_base_colour( nuc );

        //if the colours don't match or we're at the end of the string
        //we need to flush the buffer
        if ( colour != current_colour ) {
            //add to our base span (assuming it has something in)
            if ( buf )
                base.append( make_span(buf, current_colour) );

            //reset colour and restart buffer with the new char
            current_colour = colour;
            buf = base_map[nuc] || nuc;
        }
        else {
            buf += base_map[nuc] || nuc;
        }
    }

    //add anything remaining on the buffer (there will always be at least 1 base)
    base.append( make_span(buf, current_colour) );

    return base;
}

</script>

<div class="well">
    <table class="table table-condensed">
        <tr>
            <th>QC Run ID</th>
            <td id="qc_run_id">[% qc_run_id %]</td>
        </tr>
        <tr>
            <th>Sequencing project</th>
            <td>[% seq_project %]</td>
        </tr>
        <tr>
            <th>Sub Project</th>
            <td>[% sub_project %]</td>
        </tr>
    </table>
    <a id="delete_run_button" class="btn btn-danger" role="button" href="#DeleteRunModal" data-toggle="modal">
        <i class="icon-remove icon-white"></i> Delete QC Run
    </a>
</div>

<div class="modal hide fade" id="DeleteRunModal">
    <div class="modal-header">
      <button type="button" class="close" data-dismiss="modal">Ã—</button>
      <h3 id="myModalLabel">Delete QC Run</h3>
    </div>

    <div class="modal-body" align="center">
      Are you sure you want to delete QC run <strong>[% qc_run_id %]</strong>?
    </div>

    <div class="modal-footer">
      <button class="btn" data-dismiss="modal">Cancel</button>
      <a class="btn btn-danger" href="[% c.uri_for('/user/crisprqc/delete_qc_run', qc_run_id) %]" id="delete_run_button">
        <i class="icon-remove icon-white"></i> Confirm Delete QC Run
      </a>
    </div>
</div>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Well</th>
            <th>ES QC Well ID</th>
            <th>Gene</th>
            <th>Pair ID</th>
            <th>Alignment</th>
            <th>Variant Files</th>
            <th>Reads</th>
            <th>Deletions</th>
            <th>Inserts</th>
            <th>Accept</th>
            <!-- <th>View trace</th> -->
        </tr>
    </thead>
    <tbody>
        [% FOR row IN wells %]
        <tr>
            <td>[% row.well_name %]</td>
            <td>[% row.es_qc_well_id %]</td>
            <td>[% row.gene %]</td>

            <td>
              [% IF row.is_crispr_pair %]
                <a href="[% c.uri_for( '/user/crispr_pair' , row.crispr_id , 'view' ) %]" target="_blank">
                  [% row.crispr_id %]
                </a>
              [% ELSE %]
                <a href="[% c.uri_for( '/user/crispr' , row.crispr_id , 'view' ) %]" target="_blank">
                  [% row.crispr_id %]
                </a>
              [% END %]
            </td>

            <td>
                <div class="alignment">
                <span>
                    [% row.alignment.ref_start %]<span style="color:#FF0000">[% row.alignment.crispr_seq %]</span>[% row.alignment.ref_end %]
                </span><br/>
                    <div class="alignment_inner">
                        <span style="display: block">
                            <span class="seq seq_a">
                              [% IF row.alignment.no_forward_read %]
                                No Read
                              [% ELSIF row.alignment.no_forward_alignment %]
                                No alignment to target region
                              [% ELSE %]
                                [% row.alignment.forward %]
                              [% END %]
                            </span>(F)
                        </span>
                        <span style="display: block">
                            <span class="seq seq_b">
                              [% IF row.alignment.no_reverse_read %]
                                No Read
                              [% ELSIF row.alignment.no_reverse_alignment %]
                                No alignment to target region
                              [% ELSE %]
                                [% row.alignment.reverse %]
                              [% END %]
                            </span>(R)
                        </span>
                    </div>
                </div>
            </td>

            <td>
              [% IF row.has_vcf_file %]
                <a href="[% c.uri_for( '/user/crisprqc/vcf_file', row.es_qc_well_id ) %]" target="_blank" >vcf_file</a>
              [% END %]
              <br>
              [% IF row.has_vep_file %]
                <a href="[% c.uri_for( '/user/crisprqc/vep_file', row.es_qc_well_id ) %]" target="_blank" >vep_file</a>
              [% END %]
            </td>

            <td>
              [% IF row.fwd_read %]
                <a href="[% c.uri_for( '/user/crisprqc/read', 'fwd', row.es_qc_well_id ) %]" target="_blank" >fwd_read</a>
              [% END %]
              <br>
              [% IF row.rev_read %]
                <a href="[% c.uri_for( '/user/crisprqc/read', 'rev', row.es_qc_well_id ) %]" target="_blank" >rev_read</a>
              [% END %]
            </td>

            <td>
                [% FOR dir IN row.deletions.keys %]
                    [% NEXT UNLESS row.deletions.$dir.keys.size > 0 %]
                    [% dir %] deletion:<br/>
                        [% FOR loc IN row.deletions.$dir.keys.sort %]
                            [% loc %]: <span class="indel_sequence"> [% row.deletions.$dir.$loc.seq %]([% row.deletions.$dir.$loc.length %])</span> <br/>
                        [% END %]
                [% END %]
            </td>

            <td>
                [% FOR dir IN row.insertions.keys %]
                    [% NEXT UNLESS row.insertions.$dir.keys.size > 0 %]
                    [% dir %] insertion:<br/>
                        [% FOR loc IN row.insertions.$dir.keys.sort %]
                            [% loc %]: <span class="indel_sequence"> [% row.insertions.$dir.$loc.seq %]([% row.insertions.$dir.$loc.length %])</span> <br/>
                        [% END %]
                [% END %]
            </td>

            <td>
                [% IF row.show_checkbox %]
                <input type="checkbox" name="accepted_[% row.well_id %]" class="accepted" value="[% row.well_id %]" [% row.well_accepted ? "checked='checked'" : "" %] />
                [% ELSE %]
                Accepted in another run
                [% END %]
            </td>
            <!-- <td>trace</td> -->
        </tr>
        [% END %]
        [% IF wells.size == 0 %]
        <tr>
            <td colspan="8" style="text-align: center">Well data is pending, please come back later</td>
        </tr>
        [% END %]
    </tbody>
</table>
