[% META title="Crispr Search"; META tab_name = 'Crisprs' %]

<form method="POST" action="[% c.uri_for( '/user/search_crisprs' ) %]" class="well form-inline" >
    <legend>Search by LIMS2 ID</legend>
    <input type="text" name="crispr_id" placeholder="Crispr ID" value="[% crispr_id %]"></input>
    <br>OR<br>
    <input type="text" name="crispr_pair_id" placeholder="Pair ID" value="[% crispr_pair_id %]"></input>
    <br>OR<br>
    <input type="text" name="crispr_group_id" placeholder="Group ID" value="[% crispr_group_id %]"></input>
    <br><br>
    <button type="submit" name="search_by_lims2_id" class="btn btn-primary" value="Search">Search</button>
</form>

<form method="POST" action="[% c.uri_for( '/user/search_crisprs' ) %]" class="well form-inline" >
    <legend>Search by WGE ID</legend>
    <input type="text" name="wge_crispr_id" placeholder="WGE Crispr ID" value="[% wge_crispr_id %]"></input>
    <br><br>
    <button type="submit" name="search_by_wge_id" class="btn btn-primary" value="Search">Search</button>
</form>

<form method="POST" action="[% c.uri_for( '/user/search_crisprs' ) %]" class="well form-inline" >
    <legend>Search by Sequence</legend>
    <input type="text" name="sequence" placeholder="Crispr Sequence" value="[% sequence %]"></input>
    <br><br>
    <button type="submit" name="search_by_sequence" class="btn btn-primary" value="Search">Search</button>
</form>

[% IF crispr %]
<div id="crispr_table">
  <legend>View Crisprs</legend>
    <table class="table table-bordered table-striped table-condensed">
      <thead>
        <tr>
          <th>Crispr ID</th>
          <th>Type</th>
          <th>Sequence</th>
        </tr>
      </thead>
      <tbody>
      [% FOREACH entity IN crispr %]
        <tr>
          <td><a class="brand" href="[% c.uri_for('/user/crispr', entity.id, 'view' ) %]">[% entity.id %]</a></td>
          <td>[% entity.crispr_loci_type_id %]</td>
          <td class="seq">[% entity.seq %]</td>
        </tr>
      [% END %]
      </tbody>
    </table>
</div>
<body onload="textHighlighting('[% original %]');">
[% END %]

<style>
.seq {
  font-family:Consolas,Monaco,Lucida Console,Liberation Mono,DejaVu Sans Mono,Bitstream Vera Sans Mono,Courier New, monospace;
  font-size:15px;
}
.highlight {
    font-weight: bold;
    color: #FF0000;
}
</style>

<script type="text/javascript">

function textHighlighting(highlightText)
{
    var container = document.getElementById("crispr_table");
    instantSearch.highlight(container, highlightText);
}

var instantSearch = {

    "highlight": function (container, highlightText)
    {
        var internalHighlighter = function (options)
        {

            var id = {
                container: "container",
                tokens: "tokens",
                all: "all",
                token: "token",
                className: "className",
                sensitiveSearch: "sensitiveSearch"
            },
            tokens = options[id.tokens],
            allClassName = options[id.all][id.className],
            allSensitiveSearch = options[id.all][id.sensitiveSearch];


            function checkAndReplace(node, tokenArr, classNameAll, sensitiveSearchAll)
            {
                var nodeVal = node.nodeValue, parentNode = node.parentNode,
                    i, j, curToken, myToken, myClassName, mySensitiveSearch,
                    finalClassName, finalSensitiveSearch,
                    foundIndex, begin, matched, end,
                    textNode, span, isFirst;

                for (i = 0, j = tokenArr.length; i < j; i++)
                {
                    curToken = tokenArr[i];
                    myToken = curToken[id.token];
                    myClassName = curToken[id.className];
                    mySensitiveSearch = curToken[id.sensitiveSearch];

                    finalClassName = (classNameAll ? myClassName + " " + classNameAll : myClassName);

                    finalSensitiveSearch = (typeof sensitiveSearchAll !== "undefined" ? sensitiveSearchAll : mySensitiveSearch);

                    isFirst = true;
                    while (true)
                    {
                        if (finalSensitiveSearch)
                            foundIndex = nodeVal.indexOf(myToken);
                        else
                            foundIndex = nodeVal.toLowerCase().indexOf(myToken.toLowerCase());

                        if (foundIndex < 0)
                        {
                            if (isFirst)
                                break;

                            if (nodeVal)
                            {
                                textNode = document.createTextNode(nodeVal);
                                parentNode.insertBefore(textNode, node);
                            } // End if (nodeVal)

                            parentNode.removeChild(node);
                            break;
                        } // End if (foundIndex < 0)

                        isFirst = false;


                        begin = nodeVal.substring(0, foundIndex);
                        matched = nodeVal.substr(foundIndex, myToken.length);

                        if (begin)
                        {
                            textNode = document.createTextNode(begin);
                            parentNode.insertBefore(textNode, node);
                        } // End if (begin)

                        span = document.createElement("span");
                        span.className += finalClassName;
                        span.appendChild(document.createTextNode(matched));
                        parentNode.insertBefore(span, node);

                        nodeVal = nodeVal.substring(foundIndex + myToken.length);
                    } // Whend

                } // Next i
            }; // End Function checkAndReplace

            function iterator(p)
            {
                if (p === null) return;

                var children = Array.prototype.slice.call(p.childNodes), i, cur;

                if (children.length)
                {
                    for (i = 0; i < children.length; i++)
                    {
                        cur = children[i];
                        if (cur.nodeType === 3)
                        {
                            checkAndReplace(cur, tokens, allClassName, allSensitiveSearch);
                        }
                        else if (cur.nodeType === 1)
                        {
                            iterator(cur);
                        }
                    }
                }
            }; // End Function iterator

            iterator(options[id.container]);
        } // End Function highlighter
        ;


        internalHighlighter(
            {
                container: container
                , all:
                    {
                        className: "highlighter"
                    }
                , tokens: [
                    {
                        token: highlightText
                        , className: "highlight"
                        , sensitiveSearch: false
                    }
                ]
            }
        ); // End Call internalHighlighter

    } // End Function highlight

};
</script>
