workflow:
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when: always

variables:
  GIT_SUBMODULE_STRATEGY: normal
  LIMS2_WEBAPP_FILESYSTEM_VERSION: 589fcc79a02a465900b01e15830dc62ee1c39179

stages:
  - build
  - test
  - deploy

before_script:
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY

build-test:
  stage: build
  script:
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/sci/lims2-webapp-filesystem.git
    - git -C "./lims2-webapp-filesystem" checkout ${LIMS2_WEBAPP_FILESYSTEM_VERSION}
    - docker build
      --file dockerfiles/low-level
      --tag sci/lims2:bionic
      .
    - docker build
      --file dockerfiles/high-level
      --build-arg solr_url=$SOLR_URL
      --tag sci/lims2:fs
      --no-cache
      .
    - docker build
      --file dockerfiles/test
      --tag $CI_REGISTRY/sci/lims2-webapp/lims2-test:$CI_COMMIT_SHORT_SHA
      .
    - docker push $CI_REGISTRY/sci/lims2-webapp/lims2-test:$CI_COMMIT_SHORT_SHA

build:
  stage: build
  script:
    - git clone https://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/sci/lims2-webapp-filesystem.git
    - git -C "./lims2-webapp-filesystem" checkout ${LIMS2_WEBAPP_FILESYSTEM_VERSION}
    - docker build
      --file dockerfiles/low-level
      --tag sci/lims2:bionic
      .
    - docker build
      --file dockerfiles/high-level
      --build-arg solr_url=$SOLR_URL
      --tag sci/lims2:fs
      --no-cache
      .
    - docker build
      --file dockerfiles/web_app
      --build-arg lims2_ensembl_user=$LIMS2_ENSEMBL_USER
      --build-arg lims2_ensembl_host=$LIMS2_ENSEMBL_HOST
      --build-arg nfs_htgt_qc_conf=$NFS_HTGT_QC_CONF
      --build-arg lims2_file_access_server=$LIMS2_FILE_ACCESS_SERVER
      --build-arg file_api_url=$FILE_API_URL
      --build-arg off_target_binary_path=$OFF_TARGET_BINARY_PATH
      --build-arg lims2_rest_client=$LIMS2_REST_CLIENT
      --build-arg lims2_rest_client_config=$LIMS2_REST_CLIENT_CONFIG
      --build-arg vep_cache_dir=$VEP_CACHE_DIR
      --build-arg lims2_seq_file_dir=$LIMS2_SEQ_FILE_DIR
      --build-arg lims2_miseq_process_path=$LIMS2_MISEQ_PROCESS_PATH
      --build-arg lims2_primer3_miseq_pcr_config=$LIMS2_PRIMER3_MISEQ_PCR_CONFIG
      --build-arg lims2_primer3_crispr_sequencing_primer_config=$LIMS2_PRIMER3_CRISPR_SEQUENCING_PRIMER_CONFIG
      --build-arg lims2_miseq_scripts_path=$LIMS2_MISEQ_SCRIPTS_PATH
      --build-arg lims2_miseq_raw_path=$LIMS2_MISEQ_RAW_PATH
      --build-arg lims2_miseq_storage_path=$LIMS2_MISEQ_STORAGE_PATH
      --build-arg lims2_rna_seq=$LIMS2_RNA_SEQ
      --build-arg lims2_seq_archive_dir=$LIMS2_SEQ_ARCHIVE_DIR
      --build-arg lims2_rna_seq=$LIMS2_RNA_SEQ
      --build-arg warehouse_rna_seq=$WAREHOUSE_RNA_SEQ
      --build-arg lims2_rna_seq=$LIMS2_RNA_SEQ
      --build-arg basespace_api=$BASESPACE_API
      --build-arg basespace_token=$BASESPACE_TOKEN
      --tag $CI_REGISTRY/sci/lims2-webapp/lims2:$CI_COMMIT_SHORT_SHA
      .
    - docker push $CI_REGISTRY/sci/lims2-webapp/lims2:$CI_COMMIT_SHORT_SHA

test:
  stage: test
  script:
    - docker run
      --rm
      --mount "type=bind,source=/home/ubuntu/lims2-webapp-shared,target=/shared"
      --env LIMS2_DB=LIMS2_TEST_USER
      $CI_REGISTRY/sci/lims2-webapp/lims2-test:$CI_COMMIT_SHORT_SHA

clone_data_unit_type_tests:
  stage: test
  image: python:latest
  tags:
    - autoscale
  before_script:
    - echo "Over-riding default to avoid docker login attempt"
  script:
    - cd bin/clone_data
    - pip install -r clone_data_requirements.txt
    - python -m unittest
  cache:
    paths:
      - ~/.cache/pip/

test-clone-data:
  stage: test
  script:
    - docker pull $CI_REGISTRY/sci/lims2-webapp/lims2:$CI_COMMIT_SHORT_SHA
    - docker container stop lims2_test_clone_data || echo \"No container to stop\"
    - docker container rm lims2_test_clone_data || echo \"No container to remove\"
    - docker run
      --rm
      --env USER=user
      $CI_REGISTRY/sci/lims2-webapp/lims2:$CI_COMMIT_SHORT_SHA
      ./bin/lims2_clone_data_db_clone
    - docker run
      -d
      --restart unless-stopped
      --mount "type=bind,source=/home/ubuntu/lims2-webapp-shared-staging,target=/shared"
      --env LIMS2_DB=LIMS2_CLONE_DATA
      --name lims2_test_clone_data
      -p 8081:8002
      $CI_REGISTRY/sci/lims2-webapp/lims2:$CI_COMMIT_SHORT_SHA
    - python3.8 -m venv .test_clone_data_venv
    - source .test_clone_data_venv/bin/activate
    - pip install pip==23.0
    - pip install -r ./bin/clone_data/clone_data_requirements.txt
    - python bin/clone_data/clone_data_fixer_upper.py ${LIMS2_CLONE_DATA_DATABASE_DETAILS} ${CI_REGISTRY}/sci/lims2-webapp/lims2:${CI_COMMIT_SHORT_SHA}
  artifacts:
    paths:
      - well_graphs.png
      - graphs_grouped_by_piq_plate
      - fp_and_piq_wells_for_fp_plates_that_only_have_missing_miseq_wells.tsv

deploy-staging:
  stage: deploy
  script:
    - docker pull $CI_REGISTRY/sci/lims2-webapp/lims2:$CI_COMMIT_SHORT_SHA
    - docker container stop lims2_staging || echo \"No container to stop\"
    - docker container rm lims2_staging || echo \"No container to remove\"
    - docker run
      -d
      --restart unless-stopped
      --mount "type=bind,source=/home/ubuntu/lims2-webapp-shared-staging,target=/shared"
      --env LIMS2_DB=LIMS2_STAGING
      --name lims2_staging
      -p 8080:8002
      $CI_REGISTRY/sci/lims2-webapp/lims2:$CI_COMMIT_SHORT_SHA
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH

deploy-prod:
  tags:
    - autoscale
  stage: deploy
  before_script:
    - 'command -v ssh-agent >/dev/null || ( apt-get update -y && apt-get install openssh-client -y )'
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$LIMS2_PROD_PUBLIC_KEY" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - ssh ubuntu@$LIMS2_PROD_HOST "
        set -e;
        sudo docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY;
        sudo docker pull $CI_REGISTRY/sci/lims2-webapp/lims2:$CI_COMMIT_SHORT_SHA;
        sudo docker container stop lims2_live || echo \"No container to stop\";
        sudo docker container rm lims2_live || echo \"No container to remove\";
        sudo docker run
          -d
          --restart unless-stopped
          --mount
          \"type=bind,source=/home/ubuntu/lims2-webapp-shared,target=/shared\"
          --env LIMS2_DB=LIMS2_LIVE
          --name lims2_live
          -p 8001:8001
          -p 8002:8002
          $CI_REGISTRY/sci/lims2-webapp/lims2:$CI_COMMIT_SHORT_SHA
        ;
        sudo docker image prune --all --force;
      "
  after_script:
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - ssh ubuntu@$LIMS2_PROD_HOST "sudo docker logout"
  when: manual
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
