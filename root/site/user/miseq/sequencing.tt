[% META title = "Import MiSEQ sequencing"; META tab_name = "MiSEQ" %]
<script src="[% c.uri_for( '/static/jquery/js/jquery.csv.min.js' ) %]"></script>
<style>

.container {
    margin-left: 200px;
}

.amplicon, .hdr, .crispr {
    font-family: "Lucida Console", Monaco, monospace;
    text-transform: uppercase;
    white-space: nowrap;
}

td.amplicon, td.hdr:not(:empty) {
    max-width: 600px !important;
    width: 600px !important;
    overflow-x: scroll;
    display: inline-block;
    float: left;
}

</style>

<link rel="stylesheet" type="text/css" href="[% c.uri_for('/static/css/platewells.css') %]" />

<h1>Import MiSEQ sequencing</h1>
<form method="POST" enctype="multipart/form-data"
    action="[% c.uri_for('/user/miseq/submit') %]">
    <div class="form-group">
        <label>
            MiSEQ Plate:
            <select id="miseqPlate" name="miseq_plate" class="form-control">
                <option disabled selected>
                    &#x2500;&#x2500;Please select a plate&#x2500;&#x2500;
                </option>
                [% FOREACH plate IN plates %]
                    <option value="[% plate %]">[% plate %]</option>
                [% END %]
            </select>
        </label>
    </div>
    <div class="form-group">
        <label>
            External Experiments:
            <input class="form-control-file" name="spreadsheet" type="file" id="spreadsheet" />
        </label>
    </div>
    <div class="form-group">
        <table id="expTable" class="table">
            <thead>
                <tr>
                    <th>
                        Exp ID
                    </th>
                    <th>
                        Miseq Exp Name
                    </th>
                    <th>
                        Gene
                    </th>
                    <th>
                        Start Well
                    </th>
                    <th>
                        End Well
                    </th>
                    <th>
                        Crispr
                    </th>
                    <th>
                        Seq Name
                    </th>
                    <th>
                        Sequence
                    </th>
                </tr>
            </thead>
            <tbody id="expBody">
            </tbody>
        </table>
    </div>
    <div class="form-group">
        <label>
            Walk-up:
            <select id="walkup" name="walkup" class="form-control">
                <option disabled selected>
                    &#x2500;&#x2500;Please select a project&#x2500;&#x2500;
                </option>
                [% FOREACH project IN projects %]
                    <option value="[% project.id %]">[% project.name %]</option>
                [% END %]
            </select>
        </label>
    </div>
    <div id="plates">
    </div>
    <div class="form-group">
        <button type="submit" class="btn btn-primary" id="miseqSubmit">
            <i class="glyphicon glyphicon-import"></i>
            Import
        </button>
    </div>
    <input type="hidden" name="run_data" id="runData">
</form>

<script type="text/javascript">

var expData;

$('#walkup').on('change', function() {
    var val = this.value;
    $.ajax({
        dataType: 'json',
        url: '[% c.uri_for('/user/basespace/samples') %]?project=' + val,
        beforeSend: function(xhr, settings) {
            $('#plates').children().remove();
        },
    }).done(function(wells) {
        var rows = 0, cols = 0, plates = 0;
        var ordA = "A".charCodeAt(0);
        var map = {};
        wells.forEach(function(well) {
            var match = well.match(/^([A-Z])([0-9]+)_([0-9]+)/);
            if (!match) {
                return;
            }
            rows = Math.max(rows, match[1].charCodeAt(0) - ordA + 1);
            cols = Math.max(cols, match[2]);
            plates = Math.max(plates, match[3]);
            map[match[0]] = 1;
        });
        for(var p = 1; p <= plates; p++) {
            var plate = $('<div class="well-plate"></div>');
            for(var r = 0; r < rows; r++ ) {
                var row = $('<div class="well-row"></div>');
                for(var c = 1; c <= cols; c++) {
                    var col = $('<div class="well-well"></div>');
                    var key = String.fromCharCode(ordA + r) //row
                        + (( c < 10 ) ? '0' : '') //left pad the column
                        + c
                        + '_' + p; //plate
                    col.prop('title', key);
                    if (key in map) {
                        col.addClass('well-well-active');
                    }
                    row.append(col);
                }
                plate.append(row);
            }
            $('#plates').append(plate);
        }
    });
});

$('#miseqPlate').on('change', function() {
    $.ajax({
        dataType: 'json',
        type: 'GET',
        url: '[% c.uri_for("/api/crispresso_submission") %]',
        data: {
            plate: $('#miseqPlate').val()
        },
        success: function(data) {
            expData = data;
            buildTable();
        }
    });
});

$('#spreadsheet').on('change', function(evt) {
    getSpreadsheetData(evt);
});

function tableColouring() {
    $('td').css('background-color','');
    var evenExpRows = $('.mainRow:even').map(function() { return this.id });
    evenExpRows.map(function() {
        $('.' + this).find('td').css('background-color', '#E3E3E3'); //light-grey
    });

    return;
}

function getSpreadsheetData(evt) {
    var upload = $('#spreadsheet').prop('files')[0];

    var files = evt.target.files;
    var file = files[0];           
    var reader = new FileReader();
    reader.onload = function(event) {
        csvData = event.target.result;
        var formattedData = $.csv.toObjects(csvData);
        formattedData.map(function(exp) {
            expData[exp.experiment] = exp;
        });
        buildTable();
    }

    reader.readAsText(file);
}

function buildTable() {
    $('#expBody').empty();
    var cols = ['experiment_id', 'experiment', 'gene', 'min_index', 'max_index', 'crispr', 'seq_type', 'amplicon'];
    var exps = Object.values(expData);
    exps.forEach(function(exp) {
        $("#expBody").append($('<tr>')
            .attr("id", exp['experiment'])
            .addClass("mainRow")
            .addClass(exp['experiment'])
        );

        cols.forEach(function(column) {
            buildCells(exp, column);
        });

        if ( exp['hdr'] ) {
            buildRowHDR(exp);
        }
    });
    tableColouring();
    $('#runData').val(JSON.stringify(expData));
}

function buildCells(exp, column) {
    var textCellFormat = {
        'crispr'    : function() { return trimCrispr(exp, column); },
        'seq_type'  : function() { return 'Amplicon'; },
    };
    
    var text = exp[column];
    if (textCellFormat[column]) {
        text = textCellFormat[column]();
    }
    $('#' + exp['experiment']).append(
        $('<td>')
            .text( text )
            .addClass( column )
    );
}

function buildRowHDR(exp) {
    $('#expBody').append(
        $('<tr>')
            .addClass(exp['experiment'])
            .append(
                $('<td colspan=6>'),
                $('<td>').text('HDR'),
                $('<td>')
                    .text( exp['hdr'] )
                    .addClass( 'hdr' )
            )
    );
}

function trimCrispr(exp, column) {
    var crispr = exp[column];
    var boundaries = {
        GG: {
            orientation: 0,
            cut: 20,
        },
        CC: {
            orientation: 1,
            cut: 3,
        }
    };
    
    if (crispr.length == 23) {
        var pam = crispr.match(/(^CC|GG$)/i);
        var boundary = boundaries[pam[0]];
        crispr = crispr.substr(0, boundary.cut) + ' ' + crispr.substr(boundary.cut, 23);
        storeShortCrispr(crispr, boundary, exp);
    }

    return crispr;
}

function storeShortCrispr(crispr, boundary, exp) {
    var shortCrispr = crispr.split(' ')[ boundary['orientation'] ];
    expData[ exp['experiment'] ]['crispr'] = shortCrispr;
}

</script>
