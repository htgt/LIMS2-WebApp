<style>

#tooltip {
    position: absolute;
    width: auto;
    height: auto;
    padding: 10px;
    background-color: white;
    -webkit-border-radius: 10px;
    -moz-border-radius: 10px;
    border-radius: 10px;
    -webkit-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
    -moz-box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
    box-shadow: 4px 4px 10px rgba(0, 0, 0, 0.4);
    pointer-events: none;
}

#tooltip.hidden {
    display: none;
}

#tooltip p {
    margin: 0;
    font-family: Futura;
    font-size: 16px;
    line-height: 20px;
}

</style>

[% INCLUDE 'plate_grid_view.tt' rows = 8 columns = 12 letters_on = "row" row_pixel = 50 column_pixel = 50 %]

<div id="response" class="alert"></div>
<div class="page-header">
  <h1>PIQ Plate</h1>
</div>
<div class="container">
    <div id="plateDetails">
        <h3>Plate Details</h3>
        <table class="table table-striped">
            <tr>
                <td>
                    <label>PIQ Plate Name: </label>
                </td>
                <td>
                    <div class="col-md-4">
                        <input type="text" class="form-control" id="plateName">
                    </div>
                </td>
            </tr>
        </table>
    </div>
    <h3>Parent Plates</h3>
    <div class="row">
        <div class="col-md-2">
            <label>Parent Plate Name:</label>
        </div>
        <div class="col-md-3">
            <input type="text" class="form-control" id="parentPlate">
        </div>
        <div class="col-md-1">
            <button class="btn btn-warning" id="addPlate"><i class="glyphicon glyphicon-plus"></i> Add</button>
        </div>
    </div>
    <br>
</div>

<div id="miseq">
    <table id="parentCollection" class="table table-striped" hidden>
        <tr>
            <th>
                Name
            </th>
            <th>
                Type
            </th>
            <th>
                Colour
            </th>
            <th>
                Clear
            </th>
        </tr>
    </table>
    <br>
<div>

<div id="plateVisual">
    <div id="plateRow" class="col-md-12">
        <div class="col-md-4">
            <h4>Parent Plate: </h4>
            <select id="freezeName" class="btn btn-default">
                <option value="-">Parent Plate</option>
            </select>
        </div>
        <div id="firstSplit" class="col-md-12"></div>
            <div class="row col-md-12">
                <div class="col-md-4">
                    <h4>Rearray Plate: </h4>
                    <h4 id="miseqName">PIQ Plate Name</h4>
                </div>
                <div class="col-md-4">
                    <h4>Process: dist_qc</h4>
                </div>
            </div>
        <div id="secondSplit" class="col-md-12"></div>
    </div>
    <div class="row">
        <button type="button" class="btn btn-danger" onclick="clearPlate();">
            Clear <i class="glyphicon glyphicon-remove"></i>
        </button>
        <button type="button" class="btn btn-primary" onclick="submitPIQPlate();">
            Submit <i class="glyphicon glyphicon-edit"></i>
        </button>
    </div>
</div>

<div id="tooltip" class="hidden"></div>

[% INCLUDE 'user/plateupload/rearray_interface.tt' %]

<script>

var parentMiseqClassifications = {};

$(function () {
    var isMouseDown = false;
    var startIndex;

    $("#secondSplit")
        .mousedown(function(evt) {
            startIndex = highlighter(evt.target);
            isMouseDown = true;
            console.log("Down.");
        })
        .mouseover(function(evt) {
            if (isMouseDown == true) {
                highlighter(evt.target, startIndex);
            }
        });

    $('body').mouseup(function(evt) {
        if (isMouseDown == true) {
            console.log("Up.");
            isMouseDown = false;
            $('.selecting').removeClassesExcept('square fpWell miWell selecting');
            $('.selecting').toggleClass('selecting ' + selectedColour);
            d3.selectAll('.' + selectedColour).style('fill', colourHash[selectedColour]);
            var key = $('#freezeName').val();
            if (key != '-') {
                console.log('Triggered - body up');
                $('.miWell.' + selectedColour).map(function() { return trackWells(key, this); });
                checkTile();
            }
        }
    });

    $('#firstSplit .sqContainer').on("mouseover", function(cont) {
        if (parentMiseqClassifications[$('#freezeName').val()] === undefined) {
            return;
        }
        var wellName = cont.currentTarget.id;
        var wellHistoryDetails = parentMiseqClassifications[$('#freezeName').val()][wellName];
        if (wellHistoryDetails) {
            wellHistoryConstruction(cont, wellHistoryDetails)
        }
    })
    .on("mouseout", function() {
        d3.select("#tooltip").classed("hidden", true);
    });
});

$("#plateName").autocomplete({
    source: function(request, response) {
        $.getJSON("[% c.uri_for( '/api/autocomplete/plate_names/' ) %]",
        {
            term : $('#plateName').val(),
            type : 'PIQ',
        }, response);
    },
    select: function(evt, ui) {
        plateAncestors(ui.item.value);
    },
    minLength: 2,
});

function submitPIQPlate(){
    var details = { 
        name: $('#plateName').val(),
        wells: relationalData,
    };
    var relations = JSON.stringify(details);
    $.ajax({
        url: '[% c.uri_for("/api/create_piq_plate") %]',
        type: 'POST',
        dataType: 'JSON',
        data: {
            relations: relations
        },
        success: function(result) {
            console.log(result);
        },
        error: function(err) {
            console.log('err');
            console.log(err);
        }
    });
}

function plateAncestors(selection) {
    $.ajax({
        dataType: 'json',
        url: '[% c.uri_for("/api/wells_parent_plate") %]',
        data: { plate: selection },
    }).done(function(data){
        $('#parentCollection').show();
        var plates = Object.keys(data);
        for (var i = 0; i < plates.length; i++) {
            var plate = plates[i];
            if (parentPlates.indexOf(plate) == -1) {
                addTableRow({ 
                    name:   plate, 
                    type:   data[plate].type,
                    colour: 1
                });
                addOption({ 
                    name: plate,
                    type: data[plate].type
                });
            }
        }
    });

    return;
}

function fetchInheritedMiseqInfo(plate) {
    if (parentMiseqClassifications[plate] === undefined) {
        $.ajax({
            dataType: 'json',
            url: '[% c.uri_for("/api/sibling_miseq_plate") %]',
            data: { plate: plate },
        }).done(function(data) {
            parentMiseqClassifications[plate] = data;
            if ($('#freezeName').val() == plate) {
                displayClassifications(data);
            }
        });
    }

    return;
}

function trackWells(key, well) {
    var freezerDetails = {
        parent_well: well.value,
        parent_plate: key
    };

    relationalData[$(well).parent()[0].id] = freezerDetails;
    return;
}

function findFpWells(mapData) {
    var parentChildMapping = {};

    for (var childWell in relationalData) {
        if (relationalData[childWell].parent_plate == $('#freezeName').val()) {
            parentChildMapping[relationalData[childWell].parent_well] = childWell;
        }
    }

    return parentChildMapping;
}

function wellHistory(plate) {
    var fpRelations = findFpWells(relationalData);
    var fpWells = Object.keys(fpRelations);
    $('.fpWell').removeClassesExcept('square fpWell');

    fpWells.forEach(function(fp) {
        var container = $('g#' + fp)[0];
        var rect = $(container).children('rect')[plate];
        d3.select(rect).classed(selectedColour, true);
    });

    d3.selectAll('.fpWell.' + selectedColour).style('fill', colourHash[selectedColour]);

    return;
}

function displayClassifications(data) {
    clearParentPlateText();
    if (data === undefined) {
        console.log("No classifications found");
        return;
    }
    var wells = Object.keys(data);
    wells.map(function(well) { updateClassifications(well, data[well]) }); 

    return;
}

function updateClassifications(wellName, classifications) {
    var classes = classifications.map(function(val) { return val.classification.substring(0,3); });
    if (classes === undefined) {
        return;
    }
    var consistencyCheck = classes.every( (val, i, arr) => val === arr[0] );

    var d3TextObj = d3.select('#firstSplit #' + wellName + ' .wellText');

    var hyphen = d3TextObj.append('tspan')
        .attr('dx', '-1.1em')
        .attr('dy', '0.9em');
    hyphen.html('&#8722');

    var classification = d3TextObj.append('tspan')
        .attr('dx', '-1.20em')
        .attr('dy', '1em');

    if (consistencyCheck === true) {
        classification.text(classes[0]);
    } else {
        classification.text('Var');
    }

    return;
}

function clearParentPlateText() {
    var parentTexts = $('#firstSplit .wellText');

    parentTexts.map( function(item) {
        var parentText = $(parentTexts[item]);
        parentText.text( parentText.parent()[0].id ); 
    });

    return;
}

function wellHistoryConstruction(cont, wellHistoryDetails) {
    var xPos = cont.pageX;
    var yPos = cont.pageY;

    d3.select("#tooltip")
        .style("left", xPos + "px")
        .style("top", yPos + "px");
    
    var tooltipBuild = '';
    wellHistoryDetails.forEach( function(classification) {
        var classState = '<p><strong>Call: </strong><span>' + classification.classification + '</span></p>';
        var miseqPlate = '<p><strong>MiSeq Plate: </strong><span>' + classification.miseq_plate_name + '</span></p>';
        var miseqExp = '<p><strong>MiSeq Experiment: </strong><span>' + classification.miseq_exp_name + '</span></p>';
        var exp = '<p><strong>Experiment ID: </strong><span>' + classification.experiment_id + '</span></p>';
        var separate = '---';
        if (tooltipBuild) {
            tooltipBuild = tooltipBuild + separate + classState + miseqPlate + miseqExp + exp;
        } else {
            tooltipBuild = tooltipBuild + classState + miseqPlate + miseqExp + exp;
        }
    });

    $('#tooltip').html(tooltipBuild);
    d3.select("#tooltip").classed("hidden", false);

    return;
}

function clearPlate() {
    var name = $('#freezeName').val();
    var colour = assignedColours[name];
    
    $('.miWell.' + colour).map(function() { resetMiseqText(this); });
    d3.selectAll('.' + colour).style('fill', 'white');
    d3.selectAll('.' + colour).classed(colour, false);
    
    var wells = Object.keys(relationalData);
    wells.forEach(function(well) {
        if (relationalData[well].parent_plate === name) {
            delete relationalData[well];
        }
    });
}

function showPlateHistory(parentName) {
    var parentDetails = relationalData[parentName];
    var miWells = Object.keys(parentDetails);
    for (var mi = 0; mi < miWells.length; mi++) {
        var miID = wellHistory(miWells[mi],1);
        var fpID = wellHistory(parentDetails[miWells[mi]],0);
        tracking(miID, fpID);
    }
}

</script>
