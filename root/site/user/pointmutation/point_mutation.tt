[%- META title = 'Point Mutation' %]
<script src="[% c.uri_for( '/static/jquery/js/d3.min.js' ) %]"></script>
<style>
.tooltip {
  position: absolute;
  text-align: left;
  width: 150px;
  height: 20px;
  padding: 8px;
  margin-top: -20px;
  font: 10px sans-serif;
  background: #ddd;
  pointer-events: none;
}
.lb-md {
  font-size: 22px;
}
</style>

<div class="page-header">
  <h1>Point Mutation</h1>
</div>

<div class="row">
    <div class="col-md-1">
        <label class="lb-md">Gene: </label>
    </div>
    <div class="col-md-2">
        <select class="form-control" align="center" id="geneSelect">
            <option value="All" selected="selected">All</option>
        </select>
    </div>
    <div class="col-md-2">
        <label class="lb-md">Experiment: </label>
    </div>
    <div class="col-md-2">
        <select class="form-control" align="center" id="expSelect">
            <option value="All" selected="selected">All</option>
            [% FOREACH exp IN experiments %]
                <option value="[% exp %]">[% exp %]</option>
            [% END %]
        </select>
    </div>
    <div id="key" class="col-md-5">
        <h5>Colour Key: </h5>
        <svg width="120" height="70">
            <g class="legend" transform="translate(0)">
                <rect width="18" height="18" style="fill: #887bf7; stroke: #887bf7;"></rect>
                <text x="22" y="14">Well</text>
            </g>
            <g class="legend" transform="translate(0,20)">
                <rect width="18" height="18" style="fill: #66c2a5; stroke: #66c2a5;"></rect>
                <text x="22" y="14">Wild Types</text>
            </g>
            <g class="legend" transform="translate(0,40)">
                <rect width="18" height="18" style="fill: #ffaa00; stroke: #ffaa00;"></rect>
                <text x="22" y="14">NHEJ clones</text>
            </g>
        </svg>
    </div>
</div>
</br>
<table id='grid-basic' class="table table-condensed table-hover">
    <thead>
        <tr>
            <th></th>
            [% SET count = 0 %]
            [% WHILE count < 12 %]
                [% count = count + 1 %]
                <th data-column-id="[% count %]">
                    [% count %]
                </th>
            [% END %]
        </tr>
    </thead>
    <tbody>
        [% SET base = 0 %]
        [% FOREACH letter IN [ 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', ] %]
            <tr id="[% letter %]">
                <th id="[% letter %]-H">[% letter %]</th>
            [% FOREACH cell IN [ '01', '09', '17', '25', '33', '41', '49', '57', '65', '73', '81', '89' ] %]
                <td id="[% base + cell %]"></td>
            [% END %]
            </tr>
            [% base = base + 1 %]
        [% END %]
    </tbody>
</table>

<script type="text/javascript" charset="utf-8">

var data = '[% wells %]';
var json = JSON.parse(data.replace(/&quot;/g,'"'));
var genes = [];
var prevGene = "";

var tau = 2 * Math.PI;

var width = 90,
    height = 90,
    radius = Math.min(width, height) / 2;

var pie = d3.pie()
    .sort(null)
    .value(function(d) { return d.population; });

var arc = d3.arc()
    .innerRadius(radius - 12)
    .outerRadius(radius)
    .startAngle(0);

var svg = d3.selectAll("td")
    .append("svg:svg")
    .attr("width", width)
    .attr("height", height)
    .attr("class","svgTool")
    .attr("onclick","wellArc(this)")
    .attr("data-toggle","tooltip")
    .attr("data-html","true")
    .attr("title", function(){ return tooltip($(this)) })
    .append("svg:g")
    .attr("class","node")
    .attr("transform", function(d){ return "translate(" + width / 2 + "," + height / 2 + ")"});

//Base ring
d3.selectAll("g.node")
    .append("path")
    .datum({endAngle: tau})
    .style("fill","887bf7")
    .attr("d",arc);

var initDonut = d3.pie()([0,0]);

var wt = d3.selectAll("g")
    .append("path")
    .datum(initDonut[0])
    .style("fill","66c2a5")
    .attr("d", arc)
    .attr("class","donut")
    .attr("class","wild");

var nhej = d3.selectAll("g")
    .append("path").datum(initDonut[1])
    .style("fill","ffaa00")
    .attr("d", arc)
    .attr("class", "donut")
    .attr("class", "nhej");

d3.selectAll("g.node").append("svg:text").attr("class","nodetext").attr("dx","-0.5em").attr("dy","0.4em").text(function(){ return twoDigits($(this).parents()[2].id) });

$(document).ready(function(){
    $('[data-toggle="tooltip"]').tooltip();   
    buildGenes();
});

function tooltip(node) {
    var oligoIndex = twoDigits(node.parent()[0].id);
    var dataPoint = json.summary[oligoIndex];
    var response = "";
    var focusGene = document.getElementById('geneSelect').value;
    if (dataPoint.gene.some(function(e){ return e == focusGene })) {
        response = `
            Oligo Index: ` + oligoIndex + `<br>
            Genes: ` + dataPoint.gene.sort().toString() + `<br>
            Status: ` + dataPoint.status + `<br>
            NHEJ: ` + dataPoint.percentages[focusGene].nhej + `<br>
            WT: ` + dataPoint.percentages[focusGene].wt;
    } else { 
        response = `
            Oligo Index: ` + oligoIndex + `<br>
            Genes: ` + dataPoint.gene.sort().toString() + `<br>
            Status: ` + dataPoint.status;
    }
    return response;
}

function wellArc(node) {
    window.location.href = '[% c.uri_for('/user/point_mutation_allele/') %]' + encodeURI('?oligoIndex=' + node.parentNode.id); 
}

function twoDigits(n) {
    return n > 9 ? "" + n: "0" + n;
}

function buildGenes() {
    var wells = json.summary;
    var nodes = d3.selectAll('td').nodes();
    var dropdown = document.getElementById('geneSelect');

    for (var i = 0; i < nodes.length; i++) {
        var wellData = wells[twoDigits(nodes[i].id)];
        if (wellData.status == 'Scanned-out') {
            //d3.select(nodes[i]).style("stroke", "red")
            //    .style("fill", "red");
            //d3.select(nodes[i].nextSibling).style("fill","white");
        }
        for (var geneInt = 0; geneInt < wellData.gene.length; geneInt++) {
            var node = nodes[i];
            var nhejArc = $(node).find('.nhej');
            var wildArc = $(node).find('.wild');
            d3.select(nhejArc[0]).classed(wellData.gene[geneInt], true);
            d3.select(wildArc[0]).classed(wellData.gene[geneInt], true);
            if (genes.includes(wellData.gene[geneInt]) == false) {
                genes.push(wellData.gene[geneInt]);
                var option = document.createElement("option");
                option.text = wellData.gene[geneInt];
                dropdown.add(option);
            }
        }
    }
}

geneSelect.onchange = function() {
    clearHighlight();

    var selection = document.getElementById('geneSelect').value;
    if (selection != 'All') {
        setTimeout(function() { d3.selectAll('.' + selection).filter(".wild").transition().duration(500).attrTween("d", arcTween(tau)); }, 250);
        setTimeout(function() { buildDonut(selection); }, 250);
    }
    prevGene = selection;
}

function buildDonut(gene) {
    var wells = json.summary;
    
    var nodes = d3.selectAll('.' + gene).filter(".nhej").nodes();
    for (var nodeIt = 0; nodeIt < nodes.length; nodeIt++) {
        var id = $(nodes[nodeIt]).closest("td")[0].id;
        var values = wells[twoDigits(id)].percentages[gene];
        var nhejTau = values.nhej / 100;
        d3.select(nodes[nodeIt]).transition().duration(500).attrTween("d", arcTween(nhejTau * tau));
    }
}

function clearHighlight() {
    if (prevGene == "") {
        d3.selectAll(".donut").transition().duration(250).attrTween("d", arcTween(0.0 * tau));
    } else {
        d3.selectAll("." + prevGene).transition().duration(250).attrTween("d", arcTween(0.0 * tau));
    }
    d3.selectAll(".svgTool").attr("data-original-title", function(){ return tooltip($(this)) });
    buildGenes()
}

function arcTween(newAngle) {
  return function(d) {
    var interpolate = d3.interpolate(d.endAngle, newAngle);
    return function(t) {
      d.endAngle = interpolate(t);
      return arc(d);
    };
  };
}

</script>
