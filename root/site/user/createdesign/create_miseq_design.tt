[% META title = "Miseq Design Creation"; META tab_name = "Designs" %]

<style>

.waiting {
    left: -20px;
}

#crisprWaiting { 
    left: 20px;
}

.glyphicon-refresh {
    color: 	#6A5ACD;
}

.glyphicon-refresh-animate {
    -animation: spin 1.2s infinite linear;
    -webkit-animation: spin2 1.2s infinite linear;
}

tr.fail td{ 
    background-color: #F2DEDE;
}

tr.success td{ 
    background-color: #DFF0D8;
}

#owner {
    left: 30px;
}

</style>

<h1>Miseq Design Creation</h1>

<form method="POST" class="col-md-12 well" id="crisprSearch">
    <fieldset class="col-md-12 well">
        <div class="row col-md-12" align="center">
            <h4 class="col-md-2 col-md-offset-3">Design Type</h4>
            <div class="col-md-3">
                <select id="designType" name="design_type" class="form-control" align="center">
                    <option value="miseq-nhej">miseq-nhej</option>
                    <option value="miseq-hdr">miseq-hdr</option>
                </select>
            </div>
        </div>
        <div class="row col-md-12" align="center">
            <h4 class="col-md-2 col-md-offset-3">Presets</h4>
            <div class="col-md-3">
                <select id="presetSelection" name="preset_selection" class="presetDD form-control" align="center">
                    [% FOREACH preset IN presets %]
                        [% IF preset == selected_preset %]
                            <option value="[% preset %]" selected>[% preset %]</option>
                        [% ELSE %]
                            <option value="[% preset %]">[% preset %]</option>
                        [% END %]
                    [% END %]
                </select>
            </div>
            <button class="btn btn-warning col-md-2" id="showPreset" type="button" data-toggle="modal" data-target="#presetModal">
                View Preset  <i class="glyphicon glyphicon-list-alt"></i>
            </button>
        </div>
    </fieldset>
    <br>
    <fieldset class="col-md-12 well">
        <legend class="col-md-12 row">Design Progess Crispr Search</legend>
        <textarea class="col-md-4 form-control textAreaKeys" id="clearTextArea" rows="8" name="crisprs" placeholder="Copy and paste Crisprs here. Press ENTER to submit, SHIFT+ENTER for a new line." value="[%- crisprID.join(', ') %]">[%- crisprID.join(', ') %]</textarea>
        <span class="help-block">Valid search terms: Crisprs should be six digits and each crispr seperated by a comma</span>
        <button type="submit" name="action" id="action" class="btn btn-primary button" >Submit</button>
        <button class="btn btn-danger button" onclick="clearSelection();">Clear <i class="glyphicon glyphicon-remove"></i></button>
        <span id="crisprWaiting" class="glyphicon glyphicon-refresh glyphicon-refresh-animate" style="font-size:28px"></span>
    </fieldset>
</form>

<div class="well designProgressVisibility">
    <legend>Design Progess</legend>
    <table class="table table-striped table-bordered table-hover">
        <thead>
            <tr>
                <th>Crispr ID</th>
                <th>WGE Crispr ID</th>
                <th>Gene ID</th>
                <th>Design ID</th>
                <th>Status</th>
            </tr>
        </thead>
        <tbody>
            [% FOR table IN crispr_table %]
                [% IF table.status != 'Success' %]
                    <tr id="[% table.lims %]" class="fail">
                [% ELSE %]
                    <tr id="[% table.lims %]" class="success">
                [% END %]
                    <td>
                        <a href="[% c.uri_for( '/user/crispr' , table.lims , 'view' ) %]" target="_blank"> [% table.lims %] </a>
                    </td>
                    <td>[% table.wge %]</td>
                    <td class="tableGene">[% table.gene %]</td>
                    <td class="tableDesign"><a href="[% c.uri_for( '/user/view_design/', { design_id => table.design } ) %]" target="_blank">[% table.design %]</a></td>
                    <td class="tableStatus">[% table.status %]</td>
                    <td>
                        <button type="button" class="btn btn-warning btn-xs" data-toggle="modal" data-target="#redoModal" onclick="transferCrispr([% table.lims %]);">Redo</button> 
                    </td>
                </tr>
            [% END %]
        </tbody>
    </table>
</div>

<div id="redoModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Design Parameters</h4>
            </div>

            <div class="modal-body col-md-12">
                [% INCLUDE 'user/createdesign/miseq_primer_params.tt' modal_function = 'redo'%]
                <div class="col-md-12 row">
                    [% INCLUDE 'user/createdesign/miseq_design_parameters_help.tt' panel_name = 'redoPanel' %]
                </div>
                <div id="redoResponse" class="col-md-12">
                </div>
            </div>
            <div class="modal-footer">
                <span id="redoWaiting" class="waiting glyphicon glyphicon-refresh glyphicon-refresh-animate" style="font-size:28px"></span>
                <button type="submit" class="submission btn btn-primary" id="redoSubmit">Submit</button>
                <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
            </div>
        </div>
    </div>
</div>
    
<div id="presetModal" class="modal fade" role="dialog">
    <div class="modal-dialog modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <button type="button" class="close" data-dismiss="modal">&times;</button>
                <h4 class="modal-title">Custom Design Parameters</h4>
            </div>
            <div class="modal-body col-md-12">
                <div id="presetID" hidden></div>
                <fieldset id="presetDDfield" class="col-md-12 row form-group">
                    <h4 class="col-md-2 col-md-offset-2">Presets: </h4>
                    <div class="col-md-4">
                        <select id="presetModalDD" class="presetDD form-control" align="center">
                            [% FOREACH preset IN presets %]
                                <option value="[% preset %]">[% preset %]</option>
                            [% END %]
                        </select>
                    </div>
                    <button id="editPreset" class="btn btn-warning">
                        Edit <i class="glyphicon glyphicon-pencil"></i>
                    </button>
                    <button id="newPreset" class="btn btn-primary">
                        New <i class="glyphicon glyphicon-pencil"></i>
                    </button>
                </fieldset>
                <div id="presetResponse" class="col-md-12">
                </div>
                <fieldset id="newPresetName" class="col-md-9 row form-group" hidden>
                    <h4 class="col-md-3 col-md-offset-2">Preset Name: </h4>
                    <div id="presetNameContainer" class="col-md-5">
                        <input id="presetNameArea" class="form-control" placeholder="Enter Preset Name">
                    </div>
                    <p id="nameError" class="col-md-4"></p>
                </fieldset>
                [% INCLUDE 'user/createdesign/miseq_primer_params.tt' modal_function = 'preset' %]
                <div class="col-md-12 row">
                    <label id="owner" class="col-md-6 col-form-label"></label>
                </div>
                <div class="col-md-12 row">
                    [% INCLUDE 'user/createdesign/miseq_design_parameters_help.tt' panel_name = 'customPanel' %]
                </div>
            </div>
            <div class="modal-footer">
                <span id="customWaiting" class="waiting glyphicon glyphicon-refresh glyphicon-refresh-animate" style="font-size:28px"></span>
                <button type="submit" class="submission btn btn-primary" id="createPreset">Create <i class="glyphicon glyphicon-pencil"></i></button>
                <button type="submit" class="submission btn btn-primary" id="updatePreset">Update <i class="glyphicon glyphicon-pencil"></i></button>
                <button type="button" class="btn btn-danger" data-dismiss="modal">Close <i class="glyphicon glyphicon-remove"></i></button>
            </div>
        </div>
    </div>

</div>

<hr/>

<div id="batch" class="col-md-12 well">
    <h3>Batch upload</h3>
    <p>
        Upload a set of manually-verified Miseq designs.
        You can download an <a href="[% c.uri_for('/user/batchdesign/miseq_example') %]">example file</a>.
    </p>
    <form method="POST" id="miseq_design_batch" enctype="multipart/form-data"
        action="[% c.uri_for('/user/batchdesign/miseq_submit' ) %]">
        <div class="btn btn-file">
            <input class="file" name="datafile" type="file" />
        </div>
        <button name="batch_upload" id="batch_upload" type="submit"
            value="batch_upload" class="btn btn-primary">
            <i class="glyphicon glyphicon-upload"></i> Batch upload
        </button>
    </form>
</div>

<script type="text/javascript" charset="utf-8">

var crisprID = '[%- crispr_id.join(', ') %]';
var presetNames = [];
var presetIDs = {};

$(document).ready(function() {
    $('.button').hide().prop('disabled', true);
    $('#crisprWaiting').hide().prop('disabled', true);
    display();
    $('.waiting').hide().prop('disabled', true);
    $('#presetModal').find('input').attr('readonly',true);
    $('#createPreset').hide().prop('disabled', true);
    $('#updatePreset').hide().prop('disabled', true);
    $('.responseContainer').hide();
    
    $.ajax({
        url: '[% c.uri_for('/api/miseq_preset_names/') %]',
        type: 'GET',
        dataType: 'JSON',
        success: function(result) {
            console.log("Response received");
            presetNames = result.map(function(val) {
                return val.toUpperCase();
            });
        },
        error: function(err) {
            console.log(err);
        }
    });
});

$('#clearTextArea').on('keyup', function() {
    if (this.value.length) {
        $('.button').show().prop('disabled', false);
    } else {
        $('.button').hide().prop('disabled', true);
    }
});

$('#clearTextArea').on('mousedown', function() {
    $('.button').show().prop('disabled', false);
});

$(".textAreaKeys").keypress(function (e) {
    if(e.which == 13 && !e.shiftKey) {        
        $(this).closest("form").submit();
        e.preventDefault();
        return false;
    }
});

$('#action').click(function() {
    $('#crisprWaiting').show().prop('disabled', false);
});

$('#redoSubmit').click(function() {
    var params = gatherParameters('redo');
    var jsonified_params = JSON.stringify(params);
    $('#redoWaiting').show().prop('disabled', false);

    $.ajax({
        url: '[% c.uri_for('/api/redo_miseq_design/') %]',
        type: 'POST',
        dataType: 'JSON',
        data: {
            requirements: jsonified_params
        },
        success: function(result) {
            console.log("Response received");
            console.log(result);
            var message;
            if (result.status == 'Success') {
                $('#redoResponse').removeClass('alert-danger').addClass('alert-success');
                var link = '[% c.uri_for("/user/view_design/") %]' + encodeURI('?design_id=' + result.design);
                message = 'Created MiSeq Design: <a href="' + link + '" target="_blank">' + result.design + '</a>';
                updateTable(params.crispr, result);
            } else {
                $('#redoResponse').removeClass('alert-success').addClass('alert-danger');
                message = 'Error: ' + result.status;
            }
            console.log(message);
            $('#redoResponse').html(message);
            $('#redoWaiting').hide().prop('disabled', true);
        },
        error: function(err) {
            console.log(err);
            $('#redoResponse').addClass('alert-danger');
            $('#redoResponse').text('Failed to create MiSeq design: ' + err.responseText);
            $('#redoWaiting').hide().prop('disabled', true);
        }
    });

});

$('#createPreset').click(function() {
    var jsonified_params = prepareParameters('preset');

    $('#presetWaiting').show().prop('disabled', false);

    $.ajax({
        url: '[% c.uri_for('/api/miseq_primer_preset/') %]',
        type: 'POST',
        dataType: 'JSON',
        data: {
            criteria: jsonified_params
        },
        success: function(result) {
            console.log("Response received");
            console.log(result);
            readonly();
            $('.presetDD').append($('<option>', {
                value: result.name,
                text: result.name
            }));
            $('#presetModalDD').val(result.name);
            updateParameters(result);
            $('#presetResponse').removeClass('alert-danger').addClass('alert-success');
            $('#presetResponse').text('Created design preset: ' + result.name);
            $('#customWaiting').hide().prop('disabled', true);
            blockDefault();
        },
        error: function(err) {
            console.log(err);
            $('#presetResponse').removeClass('alert-success').addClass('alert-danger');
            $('#presetResponse').text('Failed to create MiSeq preset: ' + err.responseText);
            $('#customWaiting').hide().prop('disabled', true);
        }
    });
});

$('#updatePreset').click(function() {
    var jsonified_params = prepareParameters('preset');

    $('#presetWaiting').show().prop('disabled', false);

    $.ajax({
        url: '[% c.uri_for('/api/edit_miseq_primer_preset/') %]',
        type: 'POST',
        dataType: 'JSON',
        data: {
            criteria: jsonified_params
        },
        success: function(result) {
            console.log("Response received");
            console.log(result);
            readonly();
            $('.presetDD').append($('<option>', {
                value: result.name,
                text: result.name
            }));
            $('#presetModalDD').val(result.name);
            updateParameters(result);
            $('#presetResponse').removeClass('alert-danger').addClass('alert-success');
            $('#presetResponse').text('Edited design preset: ' + result.name);
            $('#customWaiting').hide().prop('disabled', true);
            blockDefault();
        },
        error: function(err) {
            console.log(err);
            $('#presetResponse').removeClass('alert-success').addClass('alert-danger');
            $('#presetResponse').text('Failed to edit MiSeq preset - ' + $('#presetNameArea').val() + ' : ' + err.responseText);
            $('#customWaiting').hide().prop('disabled', true);
        }
    });
});

$('#presetModalDD').change(function() {
    $('#presetSelection').val($('#presetModalDD').val())
    blockDefault();
    getPreset();
});

$('#showPreset').click(function() {
    readonly();
    blockDefault();
    getPreset();
});

$('#editPreset').click(function() {
    var selectedPreset = $('#presetModalDD').val(); 
    $('#presetNameArea').val(selectedPreset);
    editMode('edit');
    getPreset();
});

$('#newPreset').click(function() {
    $('#presetNameArea').text('');
    editMode('new');
});

$('#presetNameArea').on('input', function() {
    var val = $(this).val();
    if (presetNames.includes(val.toUpperCase())) {
        $(this).css("background-color","#ED8B97"); //Red
        $('#presetResponseContainer').show();
        $('#presetDesignResponse').text("Name is already taken.");
    } else {
        var region = /^\w+$/; //Alpha-numeric
        var message = "Name must be unique and alpha-numeric.";
        errorNotification(this, region, message);
    }
});

$('.meltEntry').on('input', function() {
    var region = /^[1-9][0-9]$/; //Integer with range validation, 10-99
    var message = "Melting temperatures are limited to 10-99 degrees.";
    errorNotification(this, region, message);
});

$('.gcEntry').on('input', function() {
    var region = /^[1-9]?[0-9]$|^100$/; //Integer with range validation, 0-100
    var message = "GC percentages must be an integer within 0-100.";
    errorNotification(this, region, message);
});

$('.genoThreshold').on('input', function() {
    var region = /^[1-2]?[0-9]$|^30$/; //Integer with range validation, 0-30
    var message = "Genomic threshold must be an integer within 0-30.";
    errorNotification(this, region, message);
});

$('.regionWidths').on('input', function() {
    var region = /^[2-9][0-9]$|^[1-9][0-9]{2}$|^1000$/; //Integer with range validation, 20-1000
    var message = "Search ranges must be an integer within 20-1000.";
    errorNotification(this, region, message);
});

$('.increment').on('input', function() {
    var region = /^[1-9]?[0-9]$|^100$/; //Integer with range validation, 0-100
    var message = "Increments must be an integer within 0-100.";
    errorNotification(this, region, message);
});

function clearSelection(){
    $("#clearTextArea").html("");
}

function prepareParameters(set) {
    var params = gatherParameters(set);
    params.name = $('#' + set + 'NameArea').val();
    if (presetIDs[$('#presetModalDD').val()]) {
        params.id = presetIDs[$('#presetModalDD').val()];
    }
    var jsonified_params = JSON.stringify(params);

    return jsonified_params;
}

function errorNotification(entry, pattern, err) {
    var entity = $(entry);
    
    var modal = modalDecipher(entity);
    var responseID = '#' + modal + 'DesignResponse';
    var responseContainer = '#' + modal + 'ResponseContainer'
    
    var textEntry = entity.val();
    if (textEntry.match(pattern)) {
        entity.css("background-color","#67E593"); //Green
        $(responseContainer).hide();
        $(responseID).text("");
    } else if (textEntry) {
        entity.css("background-color","#ED8B97"); //Red
        $(responseContainer).show();
        $(responseID).text(err);
    } else {
        $(responseContainer).hide();
        $(responseID).text("");
        entity.css("background-color",""); //Clear
    }
    validationPreventSubmission(modal);
}

function modalDecipher(entity) {
    var id = entity.context.id;
    var splitOnCap = id.split(/(?=[A-Z])/);
    return splitOnCap[0];
}

function validationPreventSubmission(modal) {
    var check = 0;
    $('#' + modal + 'Modal input').each(function() {
        if ($(this).css('background-color') == "rgb(237, 139, 151)") { //Red
            check = 1;
        }
    });

    if (check == 1) {
        $('.submission').prop('disabled', true);
    } else {
        $('.submission').each(function() {
            if ($(this).is(':visible')) {
                $(this).prop('disabled', false);
            }
        });
    }
}

function readonly() {
    $('#createPreset').hide().prop('disabled', true);
    $('#updatePreset').hide().prop('disabled', false);
    $('#newPresetName').hide();
    $('#presetModal').find('input').attr('readonly',true);

    $('#presetModalDD').val($('#presetSelection').val());
    $('#presetDDfield').show();
    $('#presetModal input').css("background-color","");
    $('#presetResponseContainer').hide();

    return;
}

function editMode(mode) {
    if (mode == 'edit') {
        $('#updatePreset').show().prop('disabled', false);
        $('#createPreset').hide().prop('disabled', true);
    } else {
        $('#createPreset').show().prop('disabled', false);
        $('#updatePreset').hide().prop('disabled', true);
    }
    $('#presetDDfield').hide();
    $('#newPresetName').show();
    $('#presetModal').find('input').attr('readonly',false);

    return;
}


function updateTable(crispr, row) {
    $('#' + crispr).removeClass('failure').addClass('success');
    $('#' + crispr).children('.tableGene').text(row.gene);
    $('#' + crispr).children('.tableStatus').text(row.status);
    var designLink = '[% c.uri_for("/user/view_design/") %]' + encodeURI('?design_id=' + row.design);
    var designAtag = '<a href="' + designLink + '" target="_blank">' + row.design + '</a>';
    var split = "";
    if ($('#' + crispr).children('.tableDesign').text()) {
        split = ", ";
    }
    $('#' + crispr).children('.tableDesign').append(split + designAtag);

    return;
}

function gatherParameters(modalType) {
    var miseq = {
        search      : $('#' + modalType + 'MiseqSearchWidth').val(),
        offset      : $('#' + modalType + 'MiseqDeadSearchWidth').val(),
        increment   : $('#' + modalType + 'MiseqIncrement').val()
    };

    var pcr = {
        search      : $('#' + modalType + 'PcrSearchWidth').val(),
        offset      : $('#' + modalType + 'PcrDeadSearchWidth').val(),
        increment   : $('#' + modalType + 'PcrIncrement').val()
    };

    var melt = {
        min : $('#' + modalType + 'MinMt').val(),
        opt : $('#' + modalType + 'OptMt').val(),
        max : $('#' + modalType + 'MaxMt').val()
    };

    var gc = {
        min : $('#' + modalType + 'MinGc').val(),
        opt : $('#' + modalType + 'OptGc').val(),
        max : $('#' + modalType + 'MaxGc').val()
    };

    var primers = {
        miseq   : {
            widths  : miseq
        },
        pcr     : {
            widths  : pcr
        }
    };

    //Matching the as_hash structure
    var params = {
        genomic_threshold   : $('#' + modalType + 'Genomic').val(),
        design_type         : $('#' + modalType + 'DesignType').val(),
        crispr              : $('#' + modalType + 'Modal').attr("name"), 
        primers             : primers,
        mt                  : melt,
        gc                  : gc
    };

    return params;
}

function toggleModal() {
    $('#redoModal').modal('toggle');
}

function transferCrispr(crispr) {
    document.getElementById('redoModal').setAttribute("name", crispr);
}

function display() {
    if (!crisprID) {
        $('.designProgressVisibility').hide().prop('disabled', true);
    } else {
        $('.designProgressVisibility').show().prop('disabled', false);
    }
}

function getPreset() {
    var presetName = $('#presetModalDD').val();
    console.log(presetName);
    $.ajax({
        url: '[% c.uri_for('/api/miseq_primer_preset/') %]',
        type: 'GET',
        dataType: 'JSON',
        data: {
            name: presetName,
        },
        success: function(result) {
            console.log("Response received");
            console.log(result);
            updateParameters(result);
        },
        error: function(err) {
            console.log(err);
        }
    });

    return;
}

function updateParameters(data) {
    presetIDs[data.name] = data.id;

    $('#presetGenomic').val(data.genomic_threshold);
    
    var miseq = data.primers.miseq.widths;
    $('#presetMiseqSearchWidth').val(miseq.search);
    $('#presetMiseqDeadSearchWidth').val(miseq.offset);
    $('#presetMiseqIncrement').val(miseq.increment);

    var pcr = data.primers.pcr.widths;
    $('#presetPcrSearchWidth').val(pcr.search);
    $('#presetPcrDeadSearchWidth').val(pcr.offset);
    $('#presetPcrIncrement').val(pcr.increment);

    var mt = data.mt;
    $('#presetMinMt').val(mt.min);
    $('#presetOptMt').val(mt.opt);
    $('#presetMaxMt').val(mt.max);

    var gc = data.gc;
    $('#presetMinGc').val(gc.min);
    $('#presetOptGc').val(gc.opt);
    $('#presetMaxGc').val(gc.max);

    if ($('#presetModalDD').val() != 'Default') {
        $('#owner').text('Created by ' + data.user);
    } else {
        $('#owner').text('');
    }

    return;
}

function blockDefault() {
    if ($('#presetModalDD').val() == 'Default') {
        $('#editPreset').prop('disabled', true);
    } else {
        $('#editPreset').prop('disabled', false);
    }

    return;
}

</script>
