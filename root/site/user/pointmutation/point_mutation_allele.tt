[%- META title = 'Point Mutation Alleles' %]
<script src="[% c.uri_for( '/static/jquery/js/d3.min.js' ) %]"></script>
<script src="[% c.uri_for( '/static/jquery/js/d3-tip.js' ) %]"></script>

<style>

.bars {
    overflow-x: scroll;
}

.axis {
    font: 15px sans-serif;
    
    
}

.axisLabels {
    font: 18px sans-serif;
    font-weight: bold;
}


.axis path,
.axis line {
	  fill: none;
	  stroke: #000;
	  shape-rendering: crispEdges;
}

.tiptable { border-collapse: collapse; } /* remove cell spacing */
.tiptable td { padding: 0; }             /* remove cell padding */
.tiptable td:first-child { text-align: right; }
.tiptable b { font-weight: bold;}

.tooltip {
  line-height: 1;
  font-weight: bold;
  padding: 12px;
  background: rgba(0, 0, 0, 0.8);
  color: #fff;
  border-radius: 2px;
  font-size: 15px;
}

/* Creates a small triangle extender for the tooltip */
.tooltip:after {
  box-sizing: border-box;
  display: inline;
  font-size: 10px;
  width: 100%;
  line-height: 1;
  color: rgba(0, 0, 0, 0.8);
  content: "\25BC";
  position: absolute;
  text-align: center;
}

/* Style northward tooltips differently */
.tooltip.n:after {
  margin: -1px 0 0 0;
  top: 100%;
  left: 0;
}


body { 
    padding-bottom: 65px; 
}


.lb-md {
    font-size: 22px;
}

.lb-colour {
    font-size: 22px;
    height: 0px;
}

.images {
    max-width: 60%;
    max-height: 60%;
}

.details {
    margin-left: 0 auto;
}

.lowQS.baseSwitch {
    background-color: #FF9E00; /* Orange */
    color: black;
}

.medQS.baseSwitch {
    background-color: #2B89C4; /* Blue */
    color: white;
}

 /* The switch - the box around the slider */
.switch {
    position: relative;
    display: inline-block;
    width: 60px;
    height: 34px;
}

/* Hide default HTML checkbox */
.switch input {display:none;}

/* The slider */
.slider {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    -webkit-transition: .4s;
    transition: .4s;
}

.slider:before {
    position: absolute;
    content: "";
    height: 26px;
    width: 26px;
    left: 4px;
    bottom: 4px;
    background-color: white;
    -webkit-transition: .4s;
    transition: .4s;
}

input:checked + .slider {
    background-color: #2196F3; /* blue */
}

input:focus + .slider {
    box-shadow: 0 0 1px #2196F3; /* blue */
}

input:checked + .slider:before {
    -webkit-transform: translateX(26px);
    -ms-transform: translateX(26px);
    transform: translateX(26px);
}

/* Rounded sliders */
.slider.round {
    border-radius: 34px;
}

.slider.round:before {
    border-radius: 50%;
}

.greyout {
    opacity: 0.6;
}

</style>

<div id="response_alert" class="col-md-12"></div>

<div class="page-header row">
    <div class="col-md-6">
        <h2>Mutation Alleles - [% miseq %]: [% oligo_index %]</h2>
    </div>    
    <div class="col-md-6">
        <div class="col-md-5">
            <label id="phredLabel" class="lb-colour">Phred33 Quality</label>
        </div>
        <div class="col-md-2">
            <label class="switch">
                <input type="checkbox" id="styles" checked>
                <div class="slider round"></div>
            </label>    
        </div>
        <div class="col-md-5">
            <label id="crisprLabel" class="lb-colour">Crispr Damage</label>
        </div>
    </div>
</div>



<div class="container">
    <div class="row">
        <div class="col-md-3">
        [% SET prev = oligo_index - 1 %]
	[% IF prev <= 0 %]
	    <a href="[%- c.uri_for( '/user/point_mutation_allele',{miseq => miseq, oligoIndex => max_wells, exp => selection}) %]"><span><i class="glyphicon glyphicon-arrow-left"></i> Previous Well - [% max_wells %]</span></a>
        [% ELSE %]
	    <a href="[%- c.uri_for( '/user/point_mutation_allele',{miseq => miseq, oligoIndex => prev, exp => selection}) %]"><span class="text-left"><i class="glyphicon glyphicon-arrow-left"></i> Previous Well - [% prev %]</span></a>
        [% END %]
    </div>
        <div class="col-md-1">
            <label class="col-md">Experiment: </label>
        </div>
    <div class="col-md-5">
        <select class="form-control" align="center">
            <option value="All" onclick="showAll()">All</option>
            [% FOREACH exp IN experiments %]
            [% IF exp.id == selection %]
                <option class="ddExp" selected="selected" onclick="javascript:location.href='[%- c.uri_for( '/user/point_mutation_allele/',{miseq => miseq, oligoIndex => oligo_index, exp => exp.id}) %]'"  value="[% exp.id %]">[% exp.id %]</option>
            [% ELSE %]
                <option class="ddExp" onclick="javascript:location.href='[%- c.uri_for( '/user/point_mutation_allele/',{miseq => miseq, oligoIndex => oligo_index, exp => exp.id}) %]'"  value="[% exp.id %]">[% exp.id %]</option>
[% END %]
[% END %]
        </select>
    </div>
        <div class="col-md-3">
	[% SET next = oligo_index + 1 %]
	[% IF oligo_index >= max_wells %]
	    <a href="[%- c.uri_for( '/user/point_mutation_allele/',{miseq => miseq, oligoIndex => '1', exp => selection}) %]"><span class="col-md-offset-6 text-right">Next Well - 1 <i class="glyphicon glyphicon-arrow-right "></i></span></a>
	[% ELSE %]
	    <a href="[%- c.uri_for( '/user/point_mutation_allele/',{miseq=>miseq, oligoIndex => next, exp => selection}) %]"><span class="col-md-offset-6 text-right">Next Well - [% next %] <i class="glyphicon glyphicon-arrow-right"></i></span></a>
	[% END %]
        </div>
        &nbsp;
    </div>
</div>

<div class="well">
    <h3 class="col-md-12">Well Details</h3>

    <div class="row">
        <div class="col-md-6">
            <table class="details table table-striped">
                <tr>
                    <td>Project Name</td>
                    <td>[% miseq %]</td>
                    <td></td>
                <tr>
                    <td>Illumina Index</td>
                    <td>[% oligo_index %]</td>
                    <td></td>
                </tr>
            </table>
        </div>
    </div>
</div>
<form action="#" method="POST" id="formSubmit"></form>

[% IF selection %]
    <div class="row">
        <div class="col-md-4">
            <button class="btn btn-warning" onclick="showAll();">Show All Experiments <i class="glyphicon glyphicon-filter"></i></button>
        </div>
    </div>
[% END %]
<br>
[% IF experiments.size == 0  %]
    <p>No data found for well: [% oligo_index %].</p>
[% END %]

[% FOREACH experiment IN experiments %]
    [% IF !selection OR experiment.id == selection %]
        [% IF experiment.gene %]
            <h2>Experiment: [% experiment.id %], Gene: [% experiment.gene %]</h2>
        [% ELSE %]
            <h2>Experiment: [% experiment.id %]</h2>
        [% END %]
        <div id="clearfix[% experiment.id %]" class="clearfix row">
            <div class="col-md-2">
                <label class="lb-md">Classification: </label>
            </div>
            <div class="col-md-2">
                <form action="#" method="POST" name="class[% experiment.id %]" id="class[% experiment.id %]">
                    <select class="form-control" align="center" id="classSelect" name="class[% experiment.id %]" onchange="this.form.submit();">
                    [% FOR class IN classifications %]
                        [% IF class == experiment.class %]
                            <option value="[% class %]" selected="selected">[% class %]</option>
                        [% ELSE %]
                            <option value="[% class %]">[% class %]</option>
                        [% END %]
                    [% END %]
                    </select>
                </form>
            </div>
            <div class="btn-group dropdown">
                <button class="btn btn-danger dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                    Help 
                    <span class="sr-only">Toggle Dropdown</span>
                </button>
                <dl class="dropdown-menu" style="width: 500px;padding: 5px">
                    <dt>Not Called</dt> <dd>No classification has been set</dd>
                    <dt>Failed</dt> <dd>Failed to recover from thaw</dd>
                    <dt>Mixed</dt> <dd>2 or more cell populations detected</dd>
                    <dt>WT</dt> <dd>No damage to either allele</dd>
                    <dt>K/O Hom</dt> <dd>Frameshift damage with the same in/del observed in both alleles</dd>
                    <dt>K/O Hom Compound</dt> <dd>Frameshift damage with a different in/del on each allele</dd>
                    <dt>K/O Het</dt> <dd>Frameshift damage to one allele, second allele remains undamaged</dd>
                    <dt>HDR Hom</dt> <dd>Desired change (e.g. SNP) made on both alleles</dd>
                    <dt>HDR Het</dt> <dd>Desired change (e.g. SNP) made on one allele, no damage on second allele</dd>
                    <dt>HDR K/O</dt> <dd>Desired change (e.g. SNP) on one allele, frame-shifting in/del on the other</dd>
                    <dt>HDR Hemizygous</dt> <dd>Desired change (e.g. SNP) on the only allele present (gene resides on X chromosome)</dd>
                    <dt>K/O Hemizygous</dt> <dd>Frameshift damage on the only allele present (gene resides on X chromosome)</dd>
                </dl>
            </div>
        </div>
        <div class='genes [% experiment.id %]'></div>
        <div class="bars" id="bars[% experiment.id %]"></div>
        
        
        <div class="row">
            <div class="col-md-4">
                <button class="allele btn btn-primary" onclick="displayIndels([% experiment.id %])" value="[% experiment.id %]">
                    Allele Frequency - [% experiment.id %]  <i class="glyphicon glyphicon-chevron-down"></i>
                </button>
            </div>
            <div class="col-md-4">
                <h4 id="crisprHeader[% experiment.id %]" class="crisprHeaders" style="display: inline">Crispr: <span id="crisprSeq[% experiment.id %]" class="sequence">Null</span></h4>
            </div>
            <div class="btn-group dropup col-md-2">
                <button id="dl[% experiment.id %]" class="download btn btn-success dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Download CSV <i class="glyphicon glyphicon-download-alt"></i>
                    <span class="sr-only">Toggle Dropdown</span>
                </button>
                <div class="dropdown-menu">
                    <button class="btn btn-block btn-primary download_10" value="[% experiment.id %]">10 rows</button>
                    <button class="btn btn-block btn-info download_all" value="[% experiment.id %]">All rows</button>
                </div>
            </div>
            <div class="btn-group dropup col-md-2">
                <button id="ck[% experiment.id %]" class="colourKey btn btn-warning dropdown-toggle" data-toggle="dropdown" aria-haspopup="true" aria-expanded="false">
                    Colour Key <i class="glyphicon glyphicon-plus"></i>
                    <span class="sr-only">Toggle Dropdown</span>
                </button>
                <ul class="dropdown-menu">
                    <svg class="crisprKey" width="300" height="60">
                        <g class="legend" transform="translate(0)">
                            <rect width="18" height="18" style="fill: #0A606D; stroke: #0A606D;"></rect><!-- Blue -->
                            <text x="22" y="14">Crispr Region</text>
                        </g>
                        <g class="legend" transform="translate(0,20)">
                            <rect width="18" height="18" style="fill: #FF9E00; stroke: #FF9E00;"></rect><!-- Orange -->
                            <text x="22" y="14">Inferred Crispr</text>
                        </g>
                        <g class="legend" transform="translate(150,0)">
                            <rect width="18" height="18" style="fill: #26C485; stroke: #26C465;"></rect><!-- Green -->
                            <text x="4" y="15" class="insertion">N</text>
                            <text x="22" y="14">Insertion</text>
                        </g>
                        <g class="legend" transform="translate(150,20)">
                            <rect width="18" height="18" style="fill: #661010; stroke: #661010;"></rect><!-- Red -->
                            <text x="6" y="14" class="base-" style="fill: white" font-size="20">-</text>
                            <text x="22" y="14">Deletion</text>
                        </g>
                        <g class="legend" transform="translate(150,40)">
                            <rect width="18" height="18" style="fill: #F61067; stroke: #F61067;"></rect><!-- Pink -->
                            <text x="4" y="12" class="mutation" style="fill: white">N</text>
                            <text x="22" y="14">Mutation</text>
                        </g>
                    </svg>
                    <svg class="qualityKey" width="170" height="100">
                        <g class="legend" transform="translate(0,0)">
                            <rect width="18" height="18" style="fill: #FF9E00; stroke: #FF9E00;"></rect><!-- Orange -->
                            <text x="22" y="14">Phred33 Quality <= 10</text>
                        </g>
                        <g class="legend" transform="translate(0,20)">
                            <rect width="18" height="18" style="fill: #2B89C4; stroke: #2B89C4;"></rect><!-- Blue -->
                            <text x="22" y="14">Phred33 Quality <= 20</text>
                        </g>
                        <g class="legend" transform="translate(0,40)">
                            <rect width="18" height="18" style="fill: #661010; stroke: #661010;"></rect><!-- Red -->
                            <text x="6" y="14" class="base-" style="fill: white" font-size="20">-</text>
                            <text x="22" y="14">Deletion</text>
                        </g>
                        <g class="legend" transform="translate(0,60)">
                            <text x="4" y="15" class="insertion baseSwitch">N</text>
                            <text x="22" y="14">Insertion</text>
                        </g>
                        <g class="legend" transform="translate(0,80)">
                            <text x="4" y="12" class="mutation baseSwitch">N</text>
                            <text x="22" y="14">Mutation</text>
                        </g>
                    </svg>
                </ul>
            </div>
        </div>
        <div id='[% experiment.id %]'></div>
        <p id='response[% experiment.id %]'></p>
        <br>
    [% END %]
[% END %]

[% INCLUDE 'user/pointmutation/miseq_alleles_frequency.tt' %]

<script type="text/javascript" charset="utf-8">
var exps = [];
var rowQualityData = {};


$(document).ready(function() {
    $('.crisprHeaders').hide();
    toggleModeOpacity();
    $('.genes').each(function() {
        $($(this).attr('class').split(/\s+/)).each(function() {
            var exp = this.toString();
            if (exps.includes(exp) == false && exp != 'genes') {
                exps.push(exp);
            }
        });
    });
    console.log(exps);
    var indels = '[% indel_stats %]';
    indels = jsonify(indels);

    for (var expIndex = 0; expIndex < exps.length; expIndex++) {
        var selection = exps[expIndex];
        JSON.stringify(selection);
        var data = indels[selection];
        buildImages(selection,data);
    }
    
    var expSel = '[% selection %]';
    if (expSel) {
        document.title = '[% oligo_index %]:' + expSel + ' - [% miseq %]';
        displayIndels(document.getElementById(expSel));
        $('.allele').find('i').toggleClass('glyphicon-chevron-down').toggleClass('glyphicon-chevron-up');
    } else {
        $('.colourKey').hide();
        $('.download').hide();
        document.title = '[% oligo_index %]:All - [% miseq %]';
    }
});




$('.allele').click(function() {
    var allelesToggle = $(this).find('i');
    allelesToggle.toggleClass('glyphicon-chevron-down').toggleClass('glyphicon-chevron-up');
    var value = $(this).val();
    if (allelesToggle.hasClass('glyphicon-chevron-down')) {
        $('#dl' + value).hide();
        $('#ck' + value).hide();
    } else {
        $('#dl' + value).show();
        $('#ck' + value).show();
    }
});

$('.download_10').click(function() {
    var value = $(this).val();
    getSummary(value,'1','1');
});

$('.download_all').click(function() {
    var value = $(this).val();
    getSummary(value,'1');
});

$('#styles').change(function() {
    $('span').toggleClass('baseSwitch');
    toggleModeOpacity();    
});

function jsonify(raw) {
    return JSON.parse(raw.replace(/&quot;/g,'"'));
}

function toggleModeOpacity() {
    var opac = "greyout";
    if ($('#styles').prop("checked") == true) {
        $('#phredLabel').addClass(opac);
        $('#crisprLabel').removeClass(opac);
        $('.crisprKey').show();
        $('.qualityKey').hide();
    } else {
        $('#phredLabel').removeClass(opac);
        $('#crisprLabel').addClass(opac);
        $('.crisprKey').hide();
        $('.qualityKey').show();
    }
}

function displayIndels(exp) {
    var expTable = document.getElementById("table" + exp.id);
    if (expTable == null) {
        getSummary(exp.id);
    }
    else {
        toggleTable("table" + exp.id);
    }
}

function toggleTable(table) {
    var expTable = document.getElementById(table);
    expTable.style.display = (expTable.style.display == "table") ? "none" : "table";
}

function buildImages(selection, data) {

    var percentage = 0;

    var margin = {top: 40, right: 20, bottom: 70, left: 90},
        width = window.innerWidth*0.56,
        height = window.innerHeight*0.6;
    

    var total_reads = 0;
    var max_ticks = width/21;
    var ticksArray= [];
    var min = data[1].indel;
    var max = data[data.length-2].indel;
    if (data.length <= max_ticks) {
        for (var i = 1; i < data.length-1; i++) {
            ticksArray.push(data[i].indel);
        }
    }
    else {
        ticksArray.push(min);
    
        var quart = Math.floor((data.length-1)/4);
        ticksArray.push(data[quart].indel); 
        ticksArray.push(data[quart*2].indel);
        ticksArray.push("0");
        ticksArray.push(data[quart*3].indel);
        ticksArray.push(max);    
    }

    for (var i = 0; i < data.length; i++) {
        total_reads += data[i].frequency;
    }

    var x = d3.scaleBand()
        .rangeRound([0, width])
        .padding(0.1);

    var y = d3.scaleLinear()
        .range([height, 0]);

    var xAxis = d3.axisBottom()
        .scale(x)
        .ticks(ticksArray.length)
        .tickValues(ticksArray);
    
    var yAxis = d3.axisLeft()
        .scale(y)
        .ticks(10);

    var svg = d3.select("#bars" + selection)
        .append("svg")
        .attr("width", width + margin.left + margin.right)
        .attr("height", height + margin.top + margin.bottom)
        .append("g")
        .attr("transform", "translate(" + margin.left + "," + margin.top + ")")
         

    x.domain(data.map(function(d) { return d.indel; }));
    y.domain([0, d3.max(data, function(d) { return d.frequency/total_reads*100; })]);
    y.nice(10);

    svg.append("g")
      .attr("class", "x axis")
      .attr("transform", "translate(0," + height + ")")
      .call(xAxis)
      .selectAll("text")

    svg.append("g")
      .attr("class", "y axis")
      .call(yAxis)
      .append("text")
      .attr("transform", "rotate(-90)")
      .attr("y", 6)
      .attr("dy", ".71em")
      .style("text-anchor", "end");

    var div = d3.select("body").append("div")	
        .attr("class", "tooltip")
        .style("opacity", 0);
    
    var tip = d3.tip()
        .attr('class', 'tooltip')
        .offset([-10, 0])
        .html(function(d) {
            return `
                <table class="tiptable">
                <tr><td>Indel Size<td><b>:</b>&nbsp` + d.indel + `
                <tr><td>#Reads<td><b>:</b>&nbsp` + d.frequency + ` 
                <tr><td>%Reads<td><b>:</b>&nbsp` + (d.frequency/total_reads*100).toFixed(2) + `%
                </table>`;
                })
    
    svg.call(tip);
    
    svg.selectAll("bar")
      .data(data)
      .enter()
      .append("rect")
      .attr("class", "bar")
      .attr("x", function(d) { return x(d.indel); })
      .attr("width", x.bandwidth())
      .attr("y", function(d) { return y(d.frequency/total_reads*100); })
      .attr("height", function(d) { return height - y(d.frequency/total_reads*100); })
      .style("fill", function(d) {
            if (d.indel == 0) {
                return "#8C2626"; //Red
            }
            else {
                return "steelblue";
            }
        })
     .on("mouseover.color", function(d) {
       d3.select(this).style('fill', 'orange');})
     .on("mouseout.color", function(d) {
       d3.select(this).style("fill", function(d) {
           if (d.indel == 0) {
                return "#8C2626"; //Red
           }
           else {
                return "steelblue";
           }
        })
       })
     .on("mouseover.tip",  tip.show)
     .on("mouseout.tip", tip.hide);     

    svg.append("text")
      .attr("class", "axisLabels")
      .attr("transform",
            "translate(" + (width/2) + " ," + 
                           (height + margin.top + 20) + ")")
      .style("text-anchor", "middle")
      .text("Indel Size");
      
    svg.append("text")
      .attr("class", "axisLabels")
      .attr("transform", "rotate(-90)")
      .attr("y", 0 - margin.left)
      .attr("x",0 - (height / 2))
      .attr("dy", "1em")
      .style("text-anchor", "middle")
      .text("Read Frequency %");      

    function type(d) {
        d.frequency = +d.frequency;
    return d;
    }
}

function getImages(letter, chart, div) {
    var index = '[% oligo_index %]';
    $.ajax({
        url: '[% c.uri_for('/api/point_mutation_img/') %]',
        type: "GET",
        contentType: 'image/png',
        data: {
            miseq: '[% miseq %]', 
            oligo: index,
            exp: letter,
            name: chart
        },
        success: function(result){
            if (div == null) {
                $('.' + letter).html('<img src="data:image/png;base64,' + result + '"/>');
            } else {
                $('#' + div).html('<img src="data:image/png;base64,' + result + '"/>');
            }
        },
        error: function() {
            console.log('Failure to retrieve indel size distribution graph for ' + letter);
            $('.' + letter).html('<p>Unable to retrieve graph for well ' + index + ' experiment ' + letter + '</p>');
            $('#clearfix' + letter).hide();
        }
    });
}

function getSummary(letter, downloadFlag, limitFlag) {
    var index = '[% oligo_index %]';
    var res; 
    if (downloadFlag == null) {
        //Preview for tables
        $.ajax({
            url: '[% c.uri_for('/api/point_mutation_summary/') %]',
            type: "GET",
            contentType: 'text/plain',
            data: {
                miseq: '[% miseq %]',
                oligo: index,
                exp: letter,
                limit: 10,
            },
            success: function(result){
                createTable(letter, result);
            },
            error: function() {
                $('#' + letter).html('<p>Allele frequency summary for well ' + index + ' experiment ' + letter + ' was not found.</p>');
                $('#dl' + letter).hide();
            }
        });
    } else {
        //Download summary
        var data;
        if (limitFlag == null) {
            //All rows
            data = {
                miseq: '[% miseq %]',
                oligo: index,
                exp: letter, }
        } else {
            //10 rows
            data = {
                miseq: '[% miseq %]',
                oligo: index,
                exp: letter,
                limit: 10, }
        }
        $.ajax({
            url: '[% c.uri_for('/api/point_mutation_summary/') %]',
            type: "GET",
            contentType: 'text/plain',
            data: data,
            success: function(result){
                $("#response_alert").hide();
                console.log(result);
                downloadCSV(letter, result);
            },
            error: function() {
                console.log("Failed to retrieve data");
                $("#response_alert").addClass("alert-danger");
                $("#response_alert").html("Error while downloading!");
                $("#response_alert").show();
            }
        });
    }
    return res;
}

function getTargets(letter) {
    var index = '[% oligo_index %]';
    $.ajax({
        url: '[% c.uri_for('/api/point_mutation_target_region/') %]',
        type: "GET",
        contentType: 'text/plain',
        data: {
            miseq: '[% miseq %]', 
            oligo: index,
            exp: letter,
        },
        success: function(result){
            var res = JSON.parse(result);
        },
        error: function() {
            console.log("Found no targets for this experiment");
        }
    });
}

function createTable(exp, result) {
    result = JSON.parse(result);
    if (result.crispr) {
        $('#crisprSeq' + exp).text(result.crispr.crispr);
    } else {
        $('#crisprSeq' + exp).text('N/A');
    }
    $('#crisprHeader' + exp).show();

    var rows = result.data.split("\n");
    var headers = rows.shift().split(",");
    var displayHeaders = ['Aligned_Sequence','NHEJ','UNMODIFIED','HDR','n_deleted','n_inserted','n_mutated','#Reads','%Reads'];

    var rowObjs = [];
    for (var rowCount = 0; rowCount < rows.length; rowCount++) {
        if (rows[rowCount] == "") {
            continue;
        }
        var rowData = validateRow(rows[rowCount]);

        var rowObj = headers.reduce((obj, key, index) => ({...obj, [key]: rowData[index]}), {});
        rowObjs.push(rowObj);
    }
    
    if (rowObjs[0].Phred_Quality == undefined) {
        $('#response' + exp).text('No Phred33 Quality Data found.');
    }

    rowQualityData[exp] = rowObjs;
    
    var tableID = "table" + exp;
    $('#' + exp).append('<table id="' + tableID + '" class="table table-striped table-bordered"></table>');
    var table = document.getElementById("table" + exp);
    var header = table.createTHead();
    var headerRow = header.insertRow(0);

    for (var count = 0; count < displayHeaders.length; count++) {
        var headerCell = document.createElement("TH");
        headerCell.innerHTML = displayHeaders[count];
        headerRow.appendChild(headerCell);
    }

    var body = table.createTBody();

    for (var rowCount = 0; rowCount < rowObjs.length; rowCount++) {
        var bodyRow = body.insertRow(-1);
        var rowData = rowObjs[rowCount];
        for (var cellCount = 0; cellCount < displayHeaders.length; cellCount++) {
            var bodyCell = bodyRow.insertCell(-1);
            var columnName = displayHeaders[cellCount];
            if (columnName == 'Aligned_Sequence') {
                var highlight = rowData.Aligned_Sequence;
                if (result.crispr) {
                    highlight = highlightBases(rowData.Aligned_Sequence, result.crispr, rowData.Reference_Sequence, rowData.Phred_Quality);
                }
                bodyCell.innerHTML = '<div class="seq' + exp + ' sequence" style="width: 400px;">' + highlight + '</div>';
            } else {
                if ($.isNumeric(rowData[columnName])) {
                    rowData[columnName] = Math.round(rowData[columnName] * 100) / 100;
                }
                bodyCell.innerHTML = rowData[columnName];
            }
        }

    }

    table.style.display = "table";
    $('.seq' + exp + ':last').css('overflow-x','scroll');
    $('.seq' + exp + ':last').scroll(function() {
        $('.seq' + exp).scrollLeft($(this).scrollLeft());
    });
    if ($('#styles').prop("checked") == true) {
        $('.seq' + exp).find('span').toggleClass('baseSwitch');
    }
}

function validateRow(row) {
    var quoteQualityRegex = /([ACTG-]+,[ACTG-]+,)([\x21-\x4B]+)((,(True|False|\d+\.?\d?)){7},\d+\.?\d*$)/gm;
    //Bind on to the last 7 commas since those columns are constant.
    var splitIgnoreQuoted = /("[^"]*")|[^,]+/g;
    //Phred Qualities use , as a value. Quote the quality string then split the row
    var rowResult = row.replace(quoteQualityRegex, `$1"$2"$3`);
    var rowData = rowResult.match(splitIgnoreQuoted);
    return rowData;
}

function showAll() {
    window.location.href = '[% c.uri_for('/user/point_mutation_allele/') %]' + encodeURI('?oligoIndex=[% oligo_index %]&miseq=[% miseq %]'); 
}

function overview() {
    window.location.href = '[% c.uri_for('/user/point_mutation/') %]' + encodeURI('?miseq=[% miseq %]'); 
}

function downloadCSV(letter, result) {
    result = JSON.parse(result);
    var rows = result.data.split("\n");
    var headers = rows.shift();
    var validatedRows = [];
    for (var rowCount = 0; rowCount < rows.length; rowCount++) {
        if (rows[rowCount] == "") {
            continue;
        }
        var rowData = validateRow(rows[rowCount]);
        validatedRows.push(rowData);
    }
    validatedRows.unshift(headers);
    var data = validatedRows.join("\n");
    var hiddenElement = document.createElement('a');
    hiddenElement.href = 'data:text/csv;charset=utf-8,' + encodeURIComponent(data);
    hiddenElement.download = 'MiSeq_[% oligo_index %]_exp' + letter + '.csv';
    document.body.appendChild(hiddenElement);
    hiddenElement.click();
}

</script>
