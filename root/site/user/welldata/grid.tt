<script type="text/javascript" charset="utf-8">
        Ext.onReady( function() {
            var types = Ext.data.Types;
            Ext.define('GenotypingQC', {
                extend: 'Ext.data.Model',
                fields: [
                    {name: 'id', type: 'integer' },
                    {name: 'plate_name', type: 'string'},
                    {name: 'well', type: 'string'},
                    {name: 'gene_name', type: 'string'},
                    {name: 'allele_type', type: 'string'},
                    {name: 'allele_determination', type: 'string'},
                    {name: 'ep_well_recombinase_id', type: 'string'},
                    {name: 'final_pick_cassette_resistance', type: 'string'},
                    {name: 'final_pick_recombinase_id', type: 'string'},
                    {name: 'plate_type', type: 'string'},
                    {name: 'workflow', type: 'string'},
                    {name: 'assay_pattern', type: 'string'},
                    {name: 'accepted', type: 'string'},
                    {name: 'accepted_override', type: 'string'},
                    {name: 'gene_id', type: 'string'},
                    {name: 'design_id', type: 'string'},
                    {name: 'clone_id', type: 'string'},
                    {name: 'chromosome_fail', type: 'string'},
                    {name: 'targeting_pass', type: 'string'},
                    {name: 'targeting_puro_pass', type: 'string'},
                    {name: 'tr_pcr', type: 'string'},
                    {name: 'gr3', type: 'string'},
                    {name: 'gr4', type: 'string'},
                    {name: 'gf3', type: 'string'},
                    {name: 'gf4', type: 'string'},
                    {name: 'lr_pcr_pass', type: 'string'},
//                    {name: 'TRPCR_seq', type: 'string'},
                  [% FOR assay IN assay_types %]
                    [% FOR name IN value_names %]
                       { name: '[% assay _ '#' _ name.field %]', type: 'string' },
                    [% END %]
                  [% END %]
                ]
            });


            // Save plateName for later use
            var plateName = '[% plate_name %]';

            var store = Ext.create('Ext.data.Store', {
                model: 'GenotypingQC',
                autoLoad: true,
                autoSync: true,
                proxy: {
                  type: 'rest',
                  url: '[% c.uri_for('/api/well/genotyping_qc') %]',
                  extraParams: {
                    plate_name: '[% plate_name %]'
                  },
                  headers: {'Content-Type': 'application/json'},
                  reader: {
                   type: 'json'
                  },
                  writer: {
                   type: 'json',
                   writeAllFields: false
                  }
                },
                listeners: {
                    update: function ( self, record, operation, modifiedFieldNames, eOpts ) {
                        console.log(record);
                    }
                }
            });

            var call_types_chromosome_fail = Ext.create('Ext.data.Store', {
                fields: ['call_label'],
                data: [
                {"call_label":"-"},
                {"call_label":"0"},
                {"call_label":"1"},
                {"call_label":"2"},
                {"call_label":"3"},
                {"call_label":"4"},
                {"call_label":"Y"},
                ]
            });

            var call_types_targeting = Ext.create('Ext.data.Store', {
                fields: ['call_label'],
                data: [
                {"call_label":"-"},
                {"call_label":"pass"},
                {"call_label":"passb"},
                {"call_label":"fail"},
                {"call_label":"fa"},
                {"call_label":"potential"}, 
                {"call_label":"present"},
                {"call_label":"absent"},
                {"call_label":"na"},
                {"call_label":"nd"},
                {"call_label":"reset"}
                ]
            });

            var call_types_lrpcr = Ext.create('Ext.data.Store', {
                fields: ['call_label'],
                data: [
                {"call_label":"-"},
                {"call_label":"lrpcr_pass"},
                {"call_label":"pass"},
                {"call_label":"passb"},
                {"call_label":"fail"},
                {"call_label":"fa"},
                {"call_label":"potential"}, 
                {"call_label":"present"},
                {"call_label":"absent"},
                {"call_label":"na"},
                {"call_label":"nd"},
                {"call_label":"reset"}
                ]
            });

            var call_types_lr_pcr_pass = Ext.create('Ext.data.Store', {
                fields: ['call_label'],
                data: [
                {"call_label":"-"},
                {"call_label":"pass"},
                {"call_label":"passb"},
                {"call_label":"fail"},
                ]
            });

            var call_types_targeting_combo = Ext.create('Ext.form.ComboBox', {
                queryMode: 'local',
                store: call_types_targeting,
                displayField: 'call_label',
                forceSelection: true
            });

            var call_types_lrpcr_combo = Ext.create('Ext.form.ComboBox', {
                queryMode: 'local',
                store: call_types_lrpcr,
                displayField: 'call_label',
                forceSelection: true
            });

            var call_types_chromosome_fail_combo = Ext.create('Ext.form.ComboBox', {
                queryMode: 'local', 
                store: call_types_chromosome_fail,
                displayField: 'call_label',
                forceSelection: true
            });

            var pcr_select_values = Ext.create('Ext.data.Store', {
                fields: ['pcr_sel'],
                data: [
                {"pcr_sel":"pass"},
                {"pcr_sel":"fail"},
                {"pcr_sel":"-"}
                ]
            });

            var boolean_values = Ext.create('Ext.data.Store', {
                fields: ['b_v'],
                data: [
                {"b_v":"-"},
                {"b_v":"yes"},
                {"b_v":"no"}
                ]
            });

            var pcr_combo = Ext.create( 'Ext.form.ComboBox', {
                queryMode: 'local',
                store: pcr_select_values,
                displayField: 'pcr_sel',
                forceSelection: true
            });

            var lr_pcr_pass_combo = Ext.create( 'Ext.form.ComboBox', {
                queryMode: 'local',
                store: call_types_lr_pcr_pass,
                displayField: 'call_label',
                forceSelection: true
            });

            var override_combo = Ext.create( 'Ext.form.ComboBox', {
                queryMode: 'local',
                store: boolean_values,
                displayField: 'b_v',
                forceSelection: true
            });

            var columns = [
                {header: "Well", dataIndex: 'well', locked: true, columnWidth: 3, width: 40 },
                {header: "Gene<br>Name", dataIndex: 'gene_name', locked: true, width: 50 },
                {header: "Gene<br>ID", dataIndex: 'gene_id', locked:true, hidden: true, width: 50 },
                {header: "Design<br>ID", dataIndex: 'design_id', locked: true, width: 50 },
                {header: "Allele<br>Type", dataIndex: 'allele_type', locked: true, width: 75 },
                {header: "Distribute", dataIndex: 'accepted', locked: true, width: 55 },
            [% IF PIQ %]
                {header: "Clone ID", dataIndex: 'clone_id', editor: override_combo, locked: true, width: 110 },
            [% END %]
                {header: "Override", dataIndex: 'accepted_override', editor: override_combo, locked: true, width: 55 },
                {header: "Allele Info", columns: [
                    {header: "Type",                             dataIndex: 'allele_type',                    hidden: true, width: 60 },
                    {header: "Full allele determination",        dataIndex: 'allele_determination',           hidden: true, width: 120 },
                    {header: "Stage",                            dataIndex: 'plate_type',                     hidden: true, width: 60 },
                    {header: "Workflow",                         dataIndex: 'workflow',                       hidden: false, width: 60 },
                    {header: "Assay pattern",                    dataIndex: 'assay_pattern',                  hidden: true, width: 60 },
                    {header: "Vector<br>cass resist",            dataIndex: 'final_pick_cassette_resistance', hidden: true, width: 60 },
                    {header: "Vector<br>recombinase",            dataIndex: 'final_pick_recombinase_id',      hidden: true, width: 60 },
                    {header: "First EP<br>recombinase",          dataIndex: 'ep_well_recombinase_id',         hidden: true, width: 60 },
                ]},
                {header: "Chromosome<br>Fail", dataIndex: 'chromosome_fail', editor: call_types_chromosome_fail_combo, width: 85},
                {header: "Targeting<br>Pass", dataIndex: 'targeting_pass', editor: call_types_lrpcr_combo, width: 85},
                {header: "Targeting<br>Control", dataIndex: "[% 'targeting_control' _ '#' _ 'call' %]", editor: call_types_targeting_combo, width: 85}, 
                {header: "Targeting<br>Puro Pass", dataIndex: 'targeting_puro_pass', editor: call_types_targeting_combo, width: 85 },
                {header: "TRPCR<br>band", dataIndex: 'tr_pcr', editor: pcr_combo, width: 85 },
                {header: "LRPCR bands", columns: [
                    {header: "gr3", dataIndex: 'gr3', editor: pcr_combo, width: 50 },
                    {header: "gr4", dataIndex: 'gr4', editor: pcr_combo, width: 50 },
                    {header: "gf3", dataIndex: 'gf3', editor: pcr_combo, width: 50 },
                    {header: "gf4", dataIndex: 'gf4', editor: pcr_combo, width: 50 },
                    {header: "Pass", dataIndex: 'lr_pcr_pass', editor: lr_pcr_pass_combo, width: 50 }
                ]},
//                {header: "TRPCR<br>Seq", editor: { xtype: 'textfield' }},
                [% FOR assay IN assay_types %]
                    [% IF assay != 'targeting_control' %]
                      {header: "[% assay %]", columns: [
                        [% FOR name IN value_names %]
                            [% IF name.title == "Call" %]
                                {header: "[% name.title %]", dataIndex: "[% assay _ '#' _ name.field %]",
                                editor: call_types_targeting_combo, hideable: true, width: 85 },
                            [% ELSIF name.title == "Copy Number" %]
                                {header: "[% name.title %]", dataIndex: "[% assay _ '#' _ name.field %]",
                                editor: { xtype: 'numberfield' }, hidden: true, width: 85 },
                            [% ELSIF name.title == "Range" %]
                                {header: "[% name.title %]", dataIndex: "[% assay _ '#' _ name.field %]",
                                editor: { xtype: 'numberfield' }, hidden: true, width: 85 },
                            [% ELSIF name.title == "Confidence" %]
                                {header: "[% name.title %]", dataIndex: "[% assay _ '#' _ name.field %]",
                                editor: { xtype: 'textfield' }, hidden: true, width: 85 },
                            [% ELSIF name.title == "VIC" %]
                                {header: "[% name.title %]", dataIndex: "[% assay _ '#' _ name.field %]",
                                editor: { xtype: 'numberfield' }, hidden: true, width: 85 },
                            [% END %]
                        [% END %]
                      ]},
                    [% END %]
                [% END %]
            ];

            var items = [{
                  xtype: 'panel',
                  bodyCls: 'text-panel',
                  title: 'Genotyping QC Grid Help',
                  maxHeight : 600,
                  bodyPadding: 15,
                  loader: {
                    url: '[% c.uri_for('/user/genotyping_grid_help') %]',
                    loadMask : false,
                    autoLoad : true,
                    renderer : 'html'
                    },
                   autoScroll : true
                  }];

            var grid = Ext.create('Ext.grid.Panel', {
                height: 750,
                width: 1200,
                store: store,
                columnLines: true,
                columns: columns,
                title: "[% plate_name %] QC Results",
                invalidateScrollerOnRefresh: false,
                renderTo: 'my_results',
                viewConfig: {
                    stripeRows: true
                },
                selType: 'cellmodel',
                simpleSelect: true,
                plugins: [
                    Ext.create('Ext.grid.plugin.CellEditing', { clicksToEdit: 2 })
                ],
                tools:[
                    {
                        type: 'save',
                        tooltip: 'Save CSV file',
                        handler: function(event, toolEl, panel){
                            DownloadCsvFile();
                        }
                    },
                    {
                        type:'help',
                        tooltip: 'Get Help',
                        handler: function(event, toolEl, panel){
                            help_win = Ext.create('Ext.window.Window', {
                                x : 10,
                                y : 50,
                                items: items
                            });
//                            help_win.center();
                            help_win.show();
                        }
                    }
                    ],
            });

            function DownloadCsvFile() {
                var body = Ext.getBody();

                // create a hidden frame
                var frame = body.createChild(
                    {
                        tag     : 'iframe',
                        cls     : 'x-hidden',
                        id      : 'iframe',
                        name    : 'iframe'
                    }
                );

                [% formActionUrl = '/user/genotyping_qc_report/' %] 


                // create a hidden form with download as action
                var form = body.createChild(
                    {
                        tag     : 'form',
                        cls     : 'x-hidden',
                        id      : 'form',
                        action  : '[% c.uri_for( '/user/genotyping_qc_report' ) %]' + '/' + plateName,
                        target  : 'iframe'
                    }
                );

                form.dom.submit();

            }

                

//                var gridHeight = Ext.getBody().getViewSize().height ;
//                var gridWidth = Ext.getBody().getViewSize().width;
//                grid.setSize(gridWidth, gridHeight);

        // This code does resize, but because of the header and footer CSS
        // it is a bit confusing with two sets of scrollbars,
        // one for the widget and one for the web browser.

//        Ext.EventManager.onWindowResize(function () {
//
//               var gridHeight = Ext.getBody().getViewSize().height ;
//                var gridWidth = Ext.getBody().getViewSize().width;
//                grid.setSize(gridWidth, gridHeight);
//            });
    });
</script>
